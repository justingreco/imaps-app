{"version":3,"file":"static/js/4448.48104873.chunk.js","mappings":"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","sources":["components/Tools/Sketch/utils/sketch.ts","components/Tools/Sketch/ColorButton.tsx","components/Tools/Sketch/SizeSlider.tsx","components/Tools/Sketch/LineSymbols.tsx","components/Tools/Sketch/PolygonSymbols.tsx","components/Tools/Sketch/TextSymbols.tsx","components/Tools/Sketch/PointSymbols.tsx","components/Tools/Sketch/Sketch.tsx"],"sourcesContent":["import MapView from \"@arcgis/core/views/MapView\";\nimport SketchViewModel from \"@arcgis/core/widgets/Sketch/SketchViewModel\";\nimport MapNotesLayer from \"@arcgis/core/layers/MapNotesLayer\";\nimport GraphicsLayer from \"@arcgis/core/layers/GraphicsLayer\";\nimport Color from \"@arcgis/core/Color\";\nimport SimpleFillSymbol from \"@arcgis/core/symbols/SimpleFillSymbol\";\nimport SimpleLineSymbol from \"@arcgis/core/symbols/SimpleLineSymbol\";\nimport TextSymbol from \"@arcgis/core/symbols/TextSymbol\";\nimport WebStyleSymbol from \"@arcgis/core/symbols/WebStyleSymbol\";\nimport request from \"@arcgis/core/request\";\n\nlet pointLayer: GraphicsLayer;\nlet polylineLayer: GraphicsLayer;\nlet polygonLayer: GraphicsLayer;\nlet textLayer: GraphicsLayer;\nlet sketchLayer: MapNotesLayer;\nlet selectedTool: string = \"\";\nlet fillSymbol = new SimpleFillSymbol({\n  color: [255, 0, 0, 0.5],\n  style: \"solid\",\n  outline: {\n    width: 2,\n    color: [255, 0, 0, 1],\n  },\n});\nlet lineSymbol = new SimpleLineSymbol({\n  width: 1,\n  color: [255, 0, 0, 1],\n  style: \"solid\",\n  cap: \"round\",\n  join: \"round\",\n});\nlet textSymbol = new TextSymbol({\n  color: [255, 0, 0, 1],\n  haloColor: [255, 255, 255, 1],\n  haloSize: \"1px\",\n  text: \"\",\n  xoffset: 3,\n  yoffset: 3,\n  font: {\n    // autocasts as new Font()\n    size: 10,\n    family: \"Aerial\",\n    weight: \"bold\",\n  },\n});\nlet pointSketchViewModel: SketchViewModel;\nlet polylineSketchViewModel: SketchViewModel;\n\nlet polygonSketchViewModel: SketchViewModel;\n\nlet textSketchViewModel: SketchViewModel;\n\nexport function initializeSketchViewModel(view: MapView) {\n  sketchLayer = new MapNotesLayer({\n    listMode: \"hide\",\n    id: \"notes-layer\",\n  });\n  view.map.add(sketchLayer);\n  pointLayer = sketchLayer.pointLayer;\n  polylineLayer = sketchLayer.polylineLayer;\n  polygonLayer = sketchLayer.polygonLayer;\n\n  textLayer = sketchLayer.textLayer;\n  // create a new sketch view model for each different map note type\n  // this allows both the creation and modification of each different map note\n  pointSketchViewModel = createSketchViewModels(pointLayer, view, false);\n  polylineSketchViewModel = createSketchViewModels(polylineLayer, view, false);\n  polygonSketchViewModel = createSketchViewModels(polygonLayer, view, false);\n  polygonSketchViewModel.activeFillSymbol = fillSymbol;\n  (polylineSketchViewModel as any).activeLineSymbol = lineSymbol as any;\n\n  textSketchViewModel = createSketchViewModels(textLayer, view, true);\n}\n\nfunction createSketchViewModels(\n  layer: GraphicsLayer,\n  view: MapView,\n  isText: boolean\n) {\n  const sketchVM = new SketchViewModel({\n    view,\n    layer,\n    updateOnGraphicClick: true,\n  });\n  sketchVM.on(\"create\", addGraphic);\n  if (!isText) {\n    // sketchVM.on(\"update\", updateMapNotes);\n  }\n  return sketchVM;\n}\n\nfunction addGraphic(e: any) {\n  if (e.state === \"complete\") {\n    if (e.graphic.geometry.type === \"polygon\") {\n      e.graphic.symbol = fillSymbol;\n      sketchLayer.polygonLayer.add(e.graphic);\n      console.log(e.graphic.symbol.color);\n\n      //   setTimeout(() => polygonSketchViewModel.updateGraphics.add(e.graphic));\n\n      polygonSketchViewModel.create(e.tool);\n    }\n    if (e.graphic.geometry.type === \"polyline\") {\n      e.graphic.symbol = lineSymbol;\n      sketchLayer.polylineLayer.add(e.graphic);\n      polylineSketchViewModel.create(e.tool);\n    }\n    if (selectedTool === \"text\") {\n      e.graphic.symbol = textSymbol;\n      sketchLayer.textLayer.add(e.graphic);\n      textSketchViewModel.create(\"point\");\n    }\n  }\n}\n\nexport function toolSelected(\n  tool: string,\n  activeTool: string,\n  setActiveTool: Function\n) {\n  selectedTool = tool;\n  tool === activeTool ? setActiveTool(\"\") : setActiveTool(tool);\n  if (activeTool === \"\") {\n    cancelSketch();\n  }\n  if ([\"polygon\", \"rectangle\", \"circle\"].includes(tool)) {\n    polygonSketchViewModel.create(tool as any);\n  }\n  if ([\"polyline\"].includes(tool)) {\n    polylineSketchViewModel.create(tool as any);\n  }\n  if (tool === \"text\") {\n    polylineSketchViewModel.create(\"point\");\n  }\n}\n\nexport function polygonSymbolUpdated(\n  fillColor: Color,\n  outlineColor: Color,\n  width: number\n) {\n  fillSymbol.color = fillColor;\n  console.log(fillSymbol.color);\n  fillSymbol.outline.color = outlineColor;\n  fillSymbol.outline.width = width;\n  polygonSketchViewModel.activeFillSymbol = fillSymbol;\n  // polygonSketchViewModel.updateGraphics.forEach((graphic) => {\n  //   graphic.symbol = fillSymbol;\n  // });\n}\n\nexport function polylineSymbolUpdated(lineColor: Color, width: number) {\n  lineSymbol.color = lineColor;\n  lineSymbol.width = width;\n  polylineSketchViewModel.activeFillSymbol = lineSymbol as any;\n  polylineSketchViewModel.updateGraphics.forEach((graphic) => {\n    graphic.symbol = lineSymbol;\n  });\n}\n\nexport function textSymbolUpdated(\n  fontSize: number,\n  fontColor: Color,\n  haloSize: number,\n  haloColor: Color,\n  showHalo: boolean,\n  textContent: string\n) {\n  textSymbol.color = fontColor;\n  textSymbol.font.size = fontSize;\n  textSymbol.haloColor = haloColor;\n  textSymbol.haloSize = showHalo ? haloSize : 0;\n  textSymbol.text = textContent;\n  textSketchViewModel.pointSymbol = textSymbol as any;\n}\n\nfunction cancelSketch() {\n  pointSketchViewModel.cancel();\n  polylineSketchViewModel.cancel();\n  polygonSketchViewModel.cancel();\n  textSketchViewModel.cancel();\n}\n\nexport function clearSketch(setActiveTool: Function) {\n  setActiveTool(\"\");\n  cancelSketch();\n  sketchLayer.polygonLayer.graphics.removeAll();\n  sketchLayer.pointLayer.graphics.removeAll();\n  sketchLayer.polylineLayer.graphics.removeAll();\n  sketchLayer.textLayer.graphics.removeAll();\n}\n\nexport function getSymbols() {\n  return new Promise((resolve, reject) => {\n    const symbol: WebStyleSymbol = new WebStyleSymbol({\n      styleUrl:\n        \"http://www.arcgis.com/sharing/rest/content/items/70ccf6bcbd304773a164be896e76edd3/data\",\n      name: \"Centered Sphere\",\n    });\n\n    request(symbol.styleUrl).then((result) => {\n      resolve(result.data.items);\n    });\n  });\n}\n","import \"@esri/calcite-components/dist/components/calcite-color-picker-swatch\";\nimport \"@esri/calcite-components/dist/components/calcite-button\";\nimport \"@esri/calcite-components/dist/components/calcite-popover\";\nimport \"@esri/calcite-components/dist/components/calcite-color-picker\";\nimport \"@esri/calcite-components/dist/components/calcite-slider\";\nimport \"@esri/calcite-components/dist/components/calcite-input\";\nimport \"@esri/calcite-components/dist/components/calcite-label\";\n\nimport \"./Sketch.css\";\nimport Color from \"@arcgis/core/Color\";\nimport {\n  CalciteAction,\n  CalciteButton,\n  CalciteColorPicker,\n  CalciteColorPickerSwatch,\n  CalciteInput,\n  CalciteLabel,\n  CalcitePanel,\n  CalcitePopover,\n  CalciteSlider,\n} from \"@esri/calcite-components-react\";\nimport React, { useEffect, useRef, useState } from \"react\";\n\nfunction ColorButton(args: any) {\n  const popover = useRef<HTMLCalcitePopoverElement>(null);\n  const picker = useRef<HTMLCalciteColorPickerElement>(null);\n  const [color, setColor] = useState<Color>();\n  const [transparency, setTransparency] = useState<any>(0);\n  useEffect(() => {\n    if (args.color) {\n      setColor(new Color(args.color));\n      setTransparency((1 - args.color[3]) * 100);\n    }\n  }, [args.color]);\n\n  return (\n    <div id={args.id}>\n      <CalciteLabel>\n        {args.label} Color\n        <CalciteButton\n          id={`${args.id}-popover-button`}\n          width=\"half\"\n          iconEnd=\"pencil\"\n          color=\"neutral\"\n          appearance=\"outline\"\n        >\n          <CalciteColorPickerSwatch\n            color={color?.toHex()}\n          ></CalciteColorPickerSwatch>\n        </CalciteButton>\n      </CalciteLabel>\n      <CalcitePopover\n        ref={popover}\n        overlayPositioning=\"fixed\"\n        placement=\"top-leading\"\n        label={\"\"}\n        referenceElement={`${args.id}-popover-button`}\n      >\n        <CalcitePanel heading=\"Color\">\n          <CalciteAction\n            icon=\"x\"\n            text=\"\"\n            slot=\"header-actions-end\"\n            onClick={() => {\n              popover.current?.toggle();\n              const c = new Color(color);\n              c.a = 1 - transparency / 100;\n              args.colorSet(c);\n            }}\n          ></CalciteAction>\n          <CalciteColorPicker\n            ref={picker}\n            hideSaved\n            hideHex\n            hideChannels\n            value={color ? color.toHex() : \"#FF0000\"}\n            onCalciteColorPickerInput={(e) =>\n              setColor(new Color(e.target.value))\n            }\n          ></CalciteColorPicker>\n        </CalcitePanel>\n        {/* <CalciteButton\n          width=\"full\"\n          onClick={() => {\n            popover.current?.toggle();\n            const c = new Color(color);\n            c.a = 1 - transparency / 100;\n            args.colorSet(c);\n          }}\n        >\n          Done\n        </CalciteButton> */}\n      </CalcitePopover>\n      {!args.hideTransparency && (\n        <CalciteLabel>\n          {args.label} Transparency\n          <div className=\"slider-input\">\n            <CalciteSlider\n              max={100}\n              min={0}\n              value={transparency}\n              onCalciteSliderInput={(e) => {\n                let value: number = e.target.value as number;\n                if (value > 100) {\n                  value = 100;\n                }\n                if (value < 0) {\n                  value = 0;\n                }\n                setTransparency(value);\n                const c = new Color(color);\n                c.a = 1 - transparency / 100;\n                args.colorSet(c);\n              }}\n            ></CalciteSlider>\n            <CalciteInput\n              max={100}\n              min={0}\n              type=\"number\"\n              numberButtonType=\"none\"\n              suffixText=\"%\"\n              value={transparency}\n              onCalciteInputInput={(e) => {\n                let value: number = parseInt(e.target.value);\n                if (value > 100) {\n                  value = 100;\n                }\n                if (value < 0) {\n                  value = 0;\n                }\n\n                setTransparency(value);\n                const c = new Color(color);\n                c.a = 1 - transparency / 100;\n                args.colorSet(c);\n              }}\n            ></CalciteInput>\n          </div>\n        </CalciteLabel>\n      )}\n    </div>\n  );\n}\n\nexport default ColorButton;\n","import \"@esri/calcite-components/dist/components/calcite-slider\";\nimport \"@esri/calcite-components/dist/components/calcite-input\";\nimport \"@esri/calcite-components/dist/components/calcite-label\";\nimport {\n  CalciteInput,\n  CalciteLabel,\n  CalciteSlider,\n} from \"@esri/calcite-components-react\";\nimport { useEffect, useState } from \"react\";\n\nfunction SizeSlider(args: any) {\n  const [value, setValue] = useState<any>();\n  useEffect(() => {\n    setValue(args.value);\n  }, [args.value]);\n  return (\n    <CalciteLabel>\n      {args.label}\n      <div className=\"slider-input\">\n        <CalciteSlider\n          max={args.max}\n          min={args.min}\n          value={value}\n          onCalciteSliderInput={(e) => {\n            setValue(e.target.value);\n            args.sizeSet(e.target.value);\n          }}\n        ></CalciteSlider>\n        <CalciteInput\n          type=\"number\"\n          numberButtonType=\"none\"\n          min={args.min}\n          max={args.max}\n          value={value}\n          suffixText=\"px\"\n          onCalciteInputInput={(e) => {\n            setValue(parseFloat(e.target.value));\n            args.sizeSet(parseFloat(e.target.value));\n          }}\n        ></CalciteInput>\n      </div>\n    </CalciteLabel>\n  );\n}\nexport default SizeSlider;\n","import \"@esri/calcite-components/dist/components/calcite-color-picker-swatch\";\nimport \"@esri/calcite-components/dist/components/calcite-button\";\nimport \"./Sketch.css\";\nimport {\n  CalciteButton,\n  CalciteColorPickerSwatch,\n  CalciteInput,\n  CalciteLabel,\n} from \"@esri/calcite-components-react\";\nimport React, { useState } from \"react\";\nimport ColorButton from \"./ColorButton\";\nimport SizeSlider from \"./SizeSlider\";\nimport Color from \"@arcgis/core/Color\";\n\nfunction LineSymbols(args: any) {\n  const [lineColor, setLineColor] = useState<Color>(new Color([255, 0, 0, 1]));\n  const [width, setWidth] = useState(2);\n\n  return (\n    <div id=\"line-symbols\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"60\"\n        height={width.toString()}\n      >\n        <defs></defs>\n        <g transform=\"matrix(1,0,0,1,0,0)\">\n          <path\n            fill=\"none\"\n            fillRule=\"evenodd\"\n            stroke={lineColor?.toString()}\n            strokeWidth={width}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeDasharray=\"none\"\n            strokeMiterlimit=\"4\"\n            d={`M ${(width / 2).toString()} ${(width / 2).toString()} L 49.5 ${(\n              width / 2\n            ).toString()}`}\n          ></path>\n        </g>\n      </svg>\n      <ColorButton\n        id=\"line\"\n        label=\"Line\"\n        color={lineColor.toRgba()}\n        colorSet={(c: any) => {\n          setLineColor(c);\n          args.polylineSymbolUpdated(c, width);\n        }}\n      ></ColorButton>\n      <SizeSlider\n        value={width}\n        min={0.1}\n        max={18}\n        label=\"Width\"\n        sizeSet={(size: number) => {\n          setWidth(size);\n          args.polylineSymbolUpdated(lineColor, width);\n        }}\n      ></SizeSlider>\n    </div>\n  );\n}\n\nexport default LineSymbols;\n","import Color from \"@arcgis/core/Color\";\nimport React, { useState } from \"react\";\nimport ColorButton from \"./ColorButton\";\nimport SizeSlider from \"./SizeSlider\";\n\nfunction PolygonSymbols(args: any) {\n  const [fillColor, setFillColor] = useState<Color>(\n    new Color([255, 0, 0, 0.5])\n  );\n  const [outlineColor, setOutlineColor] = useState<Color>(\n    new Color([255, 0, 0, 1])\n  );\n  const [width, setWidth] = useState(2);\n  return (\n    <div id=\"polygon-symbols\">\n      <div>\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={(23 + width).toString()}\n          height={(23 + width).toString()}\n        >\n          <defs></defs>\n          <g\n            transform={`matrix(${(\n              1.09523809 -\n              width * 0.004328966\n            ).toString()},0,0,${(\n              1.09523809 -\n              width * 0.004328966\n            ).toString()},${(width * 0.5 + 11).toString()},${(\n              width * 0.5 +\n              11\n            ).toString()})`}\n          >\n            <path\n              vectorEffect=\"non-scaling-stroke\"\n              fill={fillColor?.toString()}\n              fillRule=\"evenodd\"\n              stroke={outlineColor?.toString()}\n              strokeWidth={width}\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeDasharray=\"none\"\n              strokeMiterlimit=\"4\"\n              d=\"M -10,-10 L 10,0 L 10,10 L -10,10 L -10,-10 Z\"\n            ></path>\n          </g>\n        </svg>\n      </div>\n      <ColorButton\n        id=\"polygon-fill\"\n        color={fillColor.toRgba()}\n        label=\"Fill\"\n        colorSet={(c: any) => {\n          setFillColor(c);\n          console.log(c);\n          args.polygonSymbolUpdated(c, outlineColor, width);\n        }}\n      ></ColorButton>\n      <ColorButton\n        id=\"polygon-outline\"\n        color={outlineColor.toRgba()}\n        label=\"Outline\"\n        colorSet={(c: any) => {\n          setOutlineColor(c);\n          args.polygonSymbolUpdated(fillColor, c, width);\n        }}\n      ></ColorButton>\n      <SizeSlider\n        label=\"Outline Width\"\n        min={0.1}\n        max={18}\n        value={width}\n        sizeSet={(size: any) => {\n          setWidth(size);\n          args.polygonSymbolUpdated(fillColor, outlineColor, width);\n        }}\n      ></SizeSlider>\n    </div>\n  );\n}\n\nexport default PolygonSymbols;\n","import \"@esri/calcite-components/dist/components/calcite-input\";\nimport \"@esri/calcite-components/dist/components/calcite-label\";\nimport Color from \"@arcgis/core/Color\";\nimport {\n  CalciteInput,\n  CalciteLabel,\n  CalciteSwitch,\n} from \"@esri/calcite-components-react\";\nimport React, { useState } from \"react\";\nimport ColorButton from \"./ColorButton\";\n\nfunction TextSymbols(args: any) {\n  const [fontColor, setFontColor] = useState<Color>(new Color([255, 0, 0, 1]));\n  const [fontSize, setFontSize] = useState(10);\n  const [showHalo, setShowHalo] = useState(false);\n  const [haloSize, setHaloSize] = useState(1);\n  const [haloColor, setHaloColor] = useState<Color>(\n    new Color([255, 255, 255, 1])\n  );\n  const [textContent, setTextContent] = useState(\"\");\n\n  return (\n    <div id=\"text-symbols\">\n      <CalciteLabel>\n        Text\n        <CalciteInput\n          type=\"textarea\"\n          scale=\"m\"\n          value={textContent}\n          onCalciteInputInput={(e) => {\n            setTextContent(e.target.value);\n          }}\n          onCalciteInputChange={(e) => {\n            requestAnimationFrame(() => {\n              args.textSymbolUpdated(\n                fontSize,\n                fontColor,\n                haloSize,\n                haloColor,\n                showHalo,\n                textContent\n              );\n            });\n          }}\n        ></CalciteInput>\n      </CalciteLabel>\n      <ColorButton\n        id=\"font\"\n        label=\"Font\"\n        color={fontColor.toRgba()}\n        hideTransparency\n        colorSet={(c: any) => {\n          setFontColor(c);\n          args.textSymbolUpdated(\n            fontSize,\n            c,\n            haloSize,\n            haloColor,\n            showHalo,\n            textContent\n          );\n        }}\n      ></ColorButton>\n      <CalciteLabel>\n        Font Size\n        <CalciteInput\n          type=\"number\"\n          min={5}\n          max={125}\n          value={fontSize.toString()}\n          onCalciteInputInput={(e) => {\n            setFontSize(parseFloat(e.target.value));\n            args.textSymbolUpdated(\n              fontSize,\n              fontColor,\n              haloSize,\n              haloColor,\n              showHalo,\n              textContent\n            );\n          }}\n        ></CalciteInput>\n      </CalciteLabel>\n      <CalciteLabel layout=\"inline\">\n        Halo\n        <CalciteSwitch\n          checked={showHalo ? true : undefined}\n          onCalciteSwitchChange={(e) => {\n            setShowHalo(e.target.checked);\n            args.textSymbolUpdated(\n              fontSize,\n              fontColor,\n              haloSize,\n              haloColor,\n              showHalo,\n              textContent\n            );\n          }}\n        ></CalciteSwitch>\n      </CalciteLabel>\n      <div id=\"halo\" hidden={showHalo ? undefined : true}>\n        <ColorButton\n          id=\"halo\"\n          label=\"\"\n          color={haloColor.toRgba()}\n          hideTransparency\n          colorSet={(c: any) => {\n            setHaloColor(c);\n            args.textSymbolUpdated(\n              fontSize,\n              fontColor,\n              haloSize,\n              c,\n              showHalo,\n              textContent\n            );\n          }}\n        ></ColorButton>\n        <CalciteLabel>\n          Size\n          <CalciteInput\n            type=\"number\"\n            min={1}\n            max={10}\n            value={haloSize.toString()}\n            onCalciteInputInput={(e) => {\n              setHaloSize(parseFloat(e.target.value));\n              args.textSymbolUpdated(\n                fontSize,\n                fontColor,\n                haloSize,\n                haloColor,\n                showHalo,\n                textContent\n              );\n            }}\n          ></CalciteInput>\n        </CalciteLabel>\n      </div>\n    </div>\n  );\n}\n\nexport default TextSymbols;\n","import React, { useEffect, useState } from \"react\";\nimport { getSymbols } from \"./utils/sketch\";\n\nfunction PointSymbols(args: any) {\n  const [symbols, setSymbols] = useState<any[]>([]);\n  useEffect(() => {\n    getSymbols().then((items) => setSymbols(items as any[]));\n  }, []);\n  return (\n    <div id=\"point-symbols\">\n      {/* {symbols.map((symbol, i)  => {\n      return <img key={i} src={`http://www.arcgis.com/sharing/rest/content/items/70ccf6bcbd304773a164be896e76edd3/${symbol.thumbnail.href}`}/>\n    })} */}\n    </div>\n  );\n}\n\nexport default PointSymbols;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport \"@esri/calcite-components/dist/components/calcite-action\";\nimport \"@esri/calcite-components/dist/components/calcite-action-group\";\n\nimport {\n  CalciteAction,\n  CalciteActionGroup,\n} from \"@esri/calcite-components-react\";\nimport \"./Sketch.css\";\nimport {\n  clearSketch,\n  initializeSketchViewModel,\n  polygonSymbolUpdated,\n  polylineSymbolUpdated,\n  textSymbolUpdated,\n  toolSelected,\n} from \"./utils/sketch\";\nimport LineSymbols from \"./LineSymbols\";\nimport PolygonSymbols from \"./PolygonSymbols\";\nimport TextSymbols from \"./TextSymbols\";\nimport PointSymbols from \"./PointSymbols\";\nfunction Sketch(args: any) {\n  const loaded = useRef(false);\n  const [activeTool, setActiveTool] = useState(\"\");\n  useEffect(() => {\n    if (!loaded.current) {\n      initializeSketchViewModel(args.view);\n    }\n  }, []);\n  return (\n    <div id=\"sketch-tools\">\n      <div className=\"sticky\">\n        <CalciteActionGroup layout=\"horizontal\">\n          <CalciteAction\n            active={activeTool === \"point\" ? true : undefined}\n            icon=\"pin\"\n            text={\"\"}\n            onClick={() => toolSelected(\"point\", activeTool, setActiveTool)}\n          ></CalciteAction>\n          <CalciteAction\n            active={activeTool === \"polyline\" ? true : undefined}\n            icon=\"line\"\n            text={\"\"}\n            onClick={() => toolSelected(\"polyline\", activeTool, setActiveTool)}\n          ></CalciteAction>\n          <CalciteAction\n            active={activeTool === \"polygon\" ? true : undefined}\n            icon=\"polygon\"\n            text={\"\"}\n            onClick={() => toolSelected(\"polygon\", activeTool, setActiveTool)}\n          ></CalciteAction>\n          <CalciteAction\n            active={activeTool === \"rectangle\" ? true : undefined}\n            icon=\"rectangle\"\n            text={\"\"}\n            onClick={() => toolSelected(\"rectangle\", activeTool, setActiveTool)}\n          ></CalciteAction>\n          <CalciteAction\n            active={activeTool === \"circle\" ? true : undefined}\n            icon=\"circle\"\n            text={\"\"}\n            onClick={() => toolSelected(\"circle\", activeTool, setActiveTool)}\n          ></CalciteAction>\n          <CalciteAction\n            active={activeTool === \"text\" ? true : undefined}\n            icon=\"text\"\n            text={\"\"}\n            onClick={() => toolSelected(\"text\", activeTool, setActiveTool)}\n          ></CalciteAction>\n        </CalciteActionGroup>\n        <CalciteActionGroup layout=\"horizontal\">\n          <CalciteAction icon=\"cursor\" text={\"\"}></CalciteAction>\n          <CalciteAction\n            icon=\"trash\"\n            text={\"\"}\n            onClick={() => clearSketch(setActiveTool)}\n          ></CalciteAction>\n        </CalciteActionGroup>\n      </div>\n      <div\n        id=\"point-symbols\"\n        className=\"symbol\"\n        hidden={activeTool !== \"point\" ? true : undefined}\n      >\n        <PointSymbols></PointSymbols>\n      </div>\n      <div\n        id=\"line-symbols\"\n        className=\"symbol\"\n        hidden={activeTool !== \"polyline\" ? true : undefined}\n      >\n        <LineSymbols\n          polylineSymbolUpdated={polylineSymbolUpdated}\n        ></LineSymbols>\n      </div>\n      <div\n        id=\"polygon-symbols\"\n        className=\"symbol\"\n        hidden={\n          ![\"polygon\", \"rectangle\", \"circle\"].includes(activeTool)\n            ? true\n            : undefined\n        }\n      >\n        <PolygonSymbols\n          polygonSymbolUpdated={polygonSymbolUpdated}\n        ></PolygonSymbols>\n      </div>\n      <div\n        id=\"text-symbols\"\n        className=\"symbol\"\n        hidden={activeTool !== \"text\" ? true : undefined}\n      >\n        <TextSymbols textSymbolUpdated={textSymbolUpdated}></TextSymbols>\n      </div>\n    </div>\n  );\n}\n\nexport default React.memo(Sketch);\n"],"names":["pointLayer","polylineLayer","polygonLayer","textLayer","sketchLayer","pointSketchViewModel","polylineSketchViewModel","polygonSketchViewModel","textSketchViewModel","selectedTool","fillSymbol","SimpleFillSymbol","color","style","outline","width","lineSymbol","SimpleLineSymbol","cap","join","textSymbol","TextSymbol","haloColor","haloSize","text","xoffset","yoffset","font","size","family","weight","createSketchViewModels","layer","view","isText","sketchVM","SketchViewModel","updateOnGraphicClick","on","addGraphic","e","state","graphic","geometry","type","symbol","add","console","log","create","tool","toolSelected","activeTool","setActiveTool","cancelSketch","includes","polygonSymbolUpdated","fillColor","outlineColor","activeFillSymbol","polylineSymbolUpdated","lineColor","updateGraphics","forEach","textSymbolUpdated","fontSize","fontColor","showHalo","textContent","pointSymbol","cancel","args","popover","useRef","picker","setColor","useState","transparency","setTransparency","useEffect","Color","id","label","iconEnd","appearance","toHex","ref","overlayPositioning","placement","referenceElement","heading","icon","slot","onClick","current","toggle","c","a","colorSet","hideSaved","hideHex","hideChannels","value","onCalciteColorPickerInput","target","hideTransparency","className","max","min","onCalciteSliderInput","numberButtonType","suffixText","onCalciteInputInput","parseInt","setValue","sizeSet","parseFloat","setLineColor","setWidth","xmlns","height","toString","transform","fill","fillRule","stroke","strokeWidth","strokeLinecap","strokeLinejoin","strokeDasharray","strokeMiterlimit","d","toRgba","setFillColor","setOutlineColor","vectorEffect","setFontColor","setFontSize","setShowHalo","setHaloSize","setHaloColor","setTextContent","scale","onCalciteInputChange","requestAnimationFrame","layout","checked","undefined","onCalciteSwitchChange","hidden","symbols","setSymbols","Promise","resolve","reject","WebStyleSymbol","styleUrl","name","request","then","result","data","items","Sketch","loaded","MapNotesLayer","listMode","map","activeLineSymbol","active","graphics","removeAll","clearSketch","React"],"sourceRoot":""}