{"version":3,"file":"static/js/3021.19192117.chunk.js","mappings":"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","sources":["components/Panels/Basemaps/Blend/utils/blend.ts","components/Panels/Basemaps/Blend/Blend.tsx","components/Panels/Basemaps/utils/basemaps.ts","components/Panels/Basemaps/utils/tips.ts","components/Panels/Basemaps/utils/useBasemaps.ts","components/Panels/Basemaps/Basemaps.tsx"],"sourcesContent":["import Basemap from \"@arcgis/core/Basemap\";\nimport MapView from \"@arcgis/core/views/MapView\";\nimport WebMap from \"@arcgis/core/WebMap\";\n\nexport function addBasemap(\n  nextStep: string,\n  evt: any,\n  items: any[],\n  basemap: Basemap,\n  index: number,\n  setActiveStep: Function,\n  view: MapView\n) {\n  if (index === 0 ) {\n    //basemap = new Basemap({ baseLayers: []})\n    view.map.basemap.baseLayers.removeAll();\n  }\n  if (index === 1 ) {\n    //basemap = new Basemap({ baseLayers: []})\n    const images = view.map.basemap.baseLayers.filter(layer => {\n      return layer.type.includes('image');\n    })\n    view.map.basemap.baseLayers.removeMany(images);\n  }\n  const id = evt?.detail?.selectedItems[0]?.value;\n  if (id) {\n    const item = items.find((item) => {\n      return item.id === id;\n    }) as __esri.PortalItem;\n    item?.load().then((item: __esri.PortalItem) => {\n      if (item.type === \"Web Map\") {\n        const webmap = new WebMap({ portalItem: { id: item.id } });\n        webmap.loadAll().then((m: WebMap) => {\n          setTimeout(() => {\n            m?.basemap.baseLayers.forEach((layer: __esri.Layer) => {\n              // if (index === 0) {\n              //   (layer as any).blendMode = \"multiply\";\n              // }\n              console.log(layer.type);\n              if (!layer.type.includes('image')) {\n                layer.opacity = 0.5;\n              }\n              basemap.baseLayers.add(layer, 0);\n            });\n\n            basemap.baseLayers.addMany(basemap.baseLayers, 0);\n            setActiveStep(nextStep);\n            if (nextStep === \"opacity\") {\n              //view.map.basemap.baseLayers.removeAll();\n              //view.map.basemap.baseLayers.addMany(basemap.baseLayers);\n\n              view.map.basemap = basemap;\n            }\n          });\n        });\n      }\n    });\n  }\n}\n","import React, { useEffect, useState, useRef } from \"react\";\nimport Portal from \"@arcgis/core/portal/Portal\";\nimport PortalGroup from \"@arcgis/core/portal/PortalGroup\";\nimport PortalItem from \"@arcgis/core/portal/PortalItem\";\n\nimport Basemap from \"@arcgis/core/Basemap\";\n\nimport {\n  CalciteCombobox,\n  CalciteComboboxItem,\n  CalciteSlider,\n  CalciteStepper,\n  CalciteStepperItem,\n} from \"@esri/calcite-components-react\";\nimport { addBasemap } from \"./utils/blend\";\nimport \"./Blend.css\";\n\nfunction Blend(args: any) {\n  const loaded = useRef(false);\n  const [activeStep, setActiveStep] = useState(\"basemap\");\n  const [maps, setMaps] = useState<PortalItem[]>([]);\n  const [images, setImages] = useState<PortalItem[]>([]);\n  const basemap = useRef<Basemap>(new Basemap({ baseLayers: [] }));\n  useEffect(() => {\n    if (!loaded.current) {\n       loaded.current = true;\n      const portal = new Portal();\n      portal\n        .queryGroups({\n          query: `id: ${args.mapGroup}`,\n        })\n        .then((result) => {\n          const group: PortalGroup = result.results[0] as PortalGroup;\n          group\n            .queryItems({\n              query: \"Web Map\",\n            })\n            .then((result) => {\n              debugger\n              setMaps(result.results);\n              \n            });\n        });\n\n    }\n  }, [args.mapGroup]);\n  useEffect(() => {\n    const portal = new Portal();\n\n    portal\n    .queryGroups({\n      query: `id: ${args.imageGroup}`,\n    })\n    .then((result) => {\n      const group: PortalGroup = result.results[0] as PortalGroup;\n      group\n        .queryItems({\n          query: \"*\",\n        })\n        .then((result) => {\n          setImages(result.results);\n\n        });\n    });  \n  },[args.imageGroup])\n  return (\n    <div className=\"blend\">\n      <CalciteStepper layout=\"vertical\">\n        <CalciteStepperItem\n          active={activeStep === \"basemap\" ? true : undefined}\n          itemTitle=\"Basemap\"\n          description=\"Select basemap layer\"\n          onClick={() => setActiveStep(\"basemap\")}\n        >\n          <CalciteCombobox\n            label=\"Basemaps\"\n            selectionMode=\"single\"\n            scale=\"l\"\n            onCalciteComboboxChange={(evt) =>\n              addBasemap(\n                \"images\",\n                evt,\n                maps,\n                basemap.current as Basemap,\n                0,\n                setActiveStep,\n                args.view as __esri.MapView\n              )\n            }\n          >\n            {maps.map((item: PortalItem) => {\n              return (\n                <CalciteComboboxItem\n                  key={item.id}\n                  title={item.title}\n                  textLabel={item.title}\n                  value={item.id}\n                ></CalciteComboboxItem>\n              );\n            })}\n          </CalciteCombobox>\n        </CalciteStepperItem>\n        <CalciteStepperItem\n          active={activeStep === \"images\" ? true : undefined}\n          itemTitle=\"Image\"\n          description=\"Select imagery layer\"\n          onClick={() => setActiveStep(\"images\")}\n        >\n          <CalciteCombobox\n            label=\"Images\"\n            selectionMode=\"single\"\n            scale=\"l\"\n            onCalciteComboboxChange={(evt) =>\n              addBasemap(\n                \"opacity\",\n                evt,\n                images,\n                basemap.current as Basemap,\n                1,\n                setActiveStep,\n                args.view as __esri.MapView\n              )\n            }\n          >\n            {images\n              .sort((a, b) => {\n                return a.title > b.title ? -1 : 1;\n              })\n              .map((item: PortalItem) => {\n                return (\n                  <CalciteComboboxItem\n                    key={item.id}\n                    title={item.title}\n                    textLabel={item.title}\n                    value={item.id}\n                  ></CalciteComboboxItem>\n                );\n              })}\n          </CalciteCombobox>\n        </CalciteStepperItem>\n        <CalciteStepperItem\n          active={activeStep === \"opacity\" ? true : undefined}\n          itemTitle=\"Opacity\"\n          description=\"Set base map layer opacity\"\n          onClick={() => setActiveStep(\"opacity\")}\n        >\n          <CalciteSlider\n            max={1}\n            min={0}\n            step={0.1}\n            value={\n              basemap.current?.baseLayers?.getItemAt(\n                basemap.current.baseLayers.length - 1\n              )?.opacity\n            }\n            maxLabel=\"Opaque\"\n            minLabel=\"Transparent\"\n            onCalciteSliderInput={(evt) => {\n              if (args.view) {\n                args.view.map.basemap.baseLayers.getItemAt(basemap.current.baseLayers.length - 1).opacity = evt.target\n                  .value as number;\n              }\n            }}\n          ></CalciteSlider>\n        </CalciteStepperItem>\n      </CalciteStepper>\n    </div>\n  );\n}\n\nexport default React.memo(Blend);\n","import * as geometryEngine from \"@arcgis/core/geometry/geometryEngine\";\nimport BasemapGallery from \"@arcgis/core/widgets/BasemapGallery\";\nimport MapView from \"@arcgis/core/views/MapView\";\nimport PortalBasemapsSource from \"@arcgis/core/widgets/BasemapGallery/support/PortalBasemapsSource\";\nimport request from \"@arcgis/core/request\";\nimport Polygon from \"@arcgis/core/geometry/Polygon\";\nimport Basemap from \"@arcgis/core/Basemap\";\nimport Color from \"@arcgis/core/Color\";\nimport * as reactiveUtils from \"@arcgis/core/core/reactiveUtils\";\nimport FeatureLayer from \"@arcgis/core/layers/FeatureLayer\";\n\nexport function initializeBasemaps(\n  view: MapView,\n  ref: HTMLDivElement,\n  id: string\n) {\n  new BasemapGallery({\n    container: ref,\n    view: view,\n    source: {\n      query: `id: ${id}`,\n    },\n  });\n}\n\nlet images: BasemapGallery;\nexport function initializeImageMaps(\n  view: MapView,\n  ref: HTMLDivElement,\n  id: string,\n  setShowAlert: Function\n) {\n  images = new BasemapGallery({\n    container: ref,\n    view: view,\n    source: new PortalBasemapsSource({\n      query: `id: ${id}`,\n      filterFunction: filterBasemaps,\n      updateBasemapsCallback: (items: Basemap[]) => {\n        return items.reverse();\n      },\n    }),\n  });\n  images.when(() => {\n    images.source.basemaps.reverse();\n    if (!imageryBoundary) {\n      getBoundary(view).then((boundary: Polygon) => {\n        imageryBoundary = boundary;\n        inRaleigh = checkBoundary(view.extent);\n        (images.source as PortalBasemapsSource).refresh();\n      });\n    }\n    view.watch(\"extent\", (extent: __esri.Extent) =>\n      viewExtentChanged(extent, view, setShowAlert)\n    );\n  });\n  view.map.watch(\"basemap\", (basemap: Basemap) => {\n    checkBasemapTheme(basemap, view).then((isLight: boolean) => {\n      setPropertyColor(view, isLight);\n    });\n  });\n}\n\nexport function initializeEsriMaps(view: MapView, ref: HTMLDivElement) {\n  new BasemapGallery({\n    container: ref,\n    view: view,\n  });\n}\n\nlet imageryBoundary: Polygon;\nlet inRaleigh: Boolean;\nlet wasRaleigh: Boolean;\nconst checkBoundary = (extent: __esri.Extent): Boolean => {\n  return geometryEngine.intersects(extent, imageryBoundary);\n};\n\nexport const filterBasemaps = (item: __esri.Basemap): boolean => {\n  if (inRaleigh) {\n    return true;\n  } else {\n    return item.portalItem.tags.includes(\"countywide\");\n  }\n};\n\nconst getBoundary = (view: __esri.MapView): Promise<Polygon> => {\n  return new Promise((resolve, reject) => {\n    request(\n      \"https://maps.raleighnc.gov/images/rest/services/Orthos2020/ImageServer/queryBoundary?outSR=102100&f=json\",\n      { responseType: \"json\" }\n    ).then((response) => {\n      imageryBoundary = Polygon.fromJSON(response.data.shape);\n      resolve(imageryBoundary);\n    });\n  });\n};\n\nconst viewExtentChanged = (\n  extent: __esri.Extent,\n  view: MapView,\n  setShowAlert: Function\n) => {\n  if (\n    imageryBoundary &&\n    images.source.basemaps.find(\n      (basemap) => images.activeBasemap.title === basemap.title\n    )\n  ) {\n    wasRaleigh = inRaleigh;\n    inRaleigh = checkBoundary(view.extent);\n    if (wasRaleigh !== inRaleigh) {\n      (images.source as PortalBasemapsSource).refresh();\n      setTimeout(() => {\n        const match = images.source.basemaps.find(\n          (basemap) => view.map.basemap.title === basemap.title\n        );\n        if (!match) {\n          const from = images.activeBasemap.title;\n          images.activeBasemap = images.source.basemaps.at(0);\n          const to = images.activeBasemap.title;\n          setShowAlert({ show: true, from: from, to: to });\n        } else {\n          images.activeBasemap = match;\n        }\n      }, 1000);\n    }\n  }\n};\n\nconst checkBasemapTheme = (\n  basemap: Basemap,\n  view: MapView\n): Promise<boolean> => {\n  return new Promise((resolve, reject) => {\n    if (basemap.baseLayers.length) {\n      const baseLayer = basemap.baseLayers.find((layer) => {\n        return layer.type === \"vector-tile\";\n      });\n      if (baseLayer?.type === \"vector-tile\") {\n        reactiveUtils\n          .whenOnce(() => baseLayer.loaded)\n          .then((loaded) => {\n            const background = (\n              baseLayer as __esri.VectorTileLayer\n            ).getStyleLayer(\"background\");\n            if (background) {\n              const color: Color = new Color(\n                background.paint[\"background-color\"]\n              );\n              view.background = { color: color } as __esri.ColorBackground;\n              resolve((color as any).isBright);\n            } else {\n              resolve(true);\n            }\n          });\n      } else if (\n        !baseLayer &&\n        basemap.baseLayers.getItemAt(0).type === \"imagery\"\n      ) {\n        resolve(false);\n      } else {\n        resolve(true);\n      }\n    }\n  });\n};\n\nconst setPropertyColor = (view: MapView, isLight: boolean) => {\n  const layer = view.map.allLayers.find((layer) => {\n    return layer.title.includes(\"Property\") && layer.type === \"feature\";\n  });\n  if (layer) {\n    const renderer = (\n      (layer as FeatureLayer)?.renderer as __esri.SimpleRenderer\n    ).clone();\n    if (isLight) {\n      (renderer.symbol as __esri.SimpleFillSymbol).outline.color.r = 0;\n      (renderer.symbol as __esri.SimpleFillSymbol).outline.color.g = 0;\n      (renderer.symbol as __esri.SimpleFillSymbol).outline.color.b = 0;\n    } else {\n      (renderer.symbol as __esri.SimpleFillSymbol).outline.color.r = 255;\n      (renderer.symbol as __esri.SimpleFillSymbol).outline.color.g = 255;\n      (renderer.symbol as __esri.SimpleFillSymbol).outline.color.b = 255;\n    }\n    (layer as FeatureLayer).renderer = renderer;\n  }\n};\n","export const tips = {title: 'Basemap Tips', tips: [\n    {\n        title: 'Imagery Basemap',\n        text: 'The lastest years of imagery are available in the Imagery basemap under the base maps option.  We recommend using this base map for imagery, unless you need to access historic imagery.',\n      },\n      {\n        title: 'Esri Basemaps',\n        text: 'You now have access to all basemaps created by Esri by select the Esri Basemaps option from the dropdown.',\n      },\n      {\n        title: 'Property Color',\n        text: 'If you switch to a dark themed basemap or an imagery basemap, the property lines will change to white for better visibility.  They will change back to black when on a light themed basemap.',\n      },\n      {\n        title: 'Available Imagery',\n        text: 'If you go to an area outside of Raleigh, the list of available imagery will change to show you what is available in your area.  Also it will switch to the latest year available and warn you the the imagery has changed.',\n      },\n]}","import MapView from \"@arcgis/core/views/MapView\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { initializeBasemaps, initializeEsriMaps, initializeImageMaps } from \"./basemaps\";\nimport { tips } from \"./tips\";\n\nconst useBasemaps = (args: any) => {\n    const [view, setView] = useState<MapView>();\n    const [showAlert, setShowAlert] = useState<any>({\n      show: false,\n      from: \"\",\n      to: \"\",\n    });\n    const [isActive, setIsActive] = useState(false);\n  \n    const loaded = useRef(false);\n    const basemapRef = useRef(null);\n    const imagesRef = useRef(null);\n    const esriRef = useRef(null);\n    const mapGroup = \"f6329364e80c438a958ce74aadc3a89f\";\n    const imageGroup = \"492386759d264d49948bf7f83957ddb9\";\n    useEffect(() => {\n      setView(args.view);\n      if (!loaded.current) {\n        loaded.current = true;\n        initializeBasemaps(args.view, basemapRef.current as any, mapGroup);\n        initializeImageMaps(\n          args.view,\n          imagesRef.current as any,\n          imageGroup,\n          setShowAlert\n        );\n        initializeEsriMaps(args.view, esriRef.current as any);\n      }\n    }, [args.view]);\n    useEffect(() => {\n      setIsActive(args.isActive);\n    }, [args.isActive]);\n    const panelDismissed = useCallback((e: any) => {\n      args.panelDismissed();\n    }, []);    \n    const tipsClicked = useCallback((e: any) => {\n        args.showTips(tips);\n        }, []);    \n    return {\n        basemapRef,\n        imagesRef,\n        esriRef,\n        mapGroup,\n        imageGroup,\n        view,\n        showAlert,\n        isActive,\n        panelDismissed,\n        tipsClicked        \n        }        \n}\nexport default useBasemaps;","import {\n  CalciteAlert,\n  CalciteTab,\n  CalciteTabNav,\n  CalciteTabs,\n  CalciteTabTitle,\n  CalcitePanel,\n  CalciteAction,\n  CalciteTooltip,\n} from \"@esri/calcite-components-react\";\nimport React, {  } from \"react\";\nimport Blend from \"./Blend/Blend\";\n\nimport \"./Basemaps.css\";\nimport useBasemaps from \"./utils/useBasemaps\";\nfunction Basemaps(args: any) {\n    \n  const { \n    basemapRef,\n    imagesRef,\n    esriRef,\n    mapGroup,\n    imageGroup,\n    view,\n    showAlert,\n    isActive,\n    panelDismissed,\n    tipsClicked  \n  } = useBasemaps(args);\n  return (\n    <CalcitePanel\n      id=\"basemaps-panel\"\n      heading=\"Basemaps\"\n      hidden={!isActive}\n      closed={!isActive ? true : undefined}\n      dismissed={!isActive ? true : undefined}\n      dismissible\n      onCalcitePanelDismiss={panelDismissed}\n    >\n      <CalciteAction id=\"tip\" icon=\"lightbulb\"  text=\"Tips\" slot=\"header-actions-end\" onClick={tipsClicked}></CalciteAction>\n      <CalciteTooltip label=\"Show Tip\" referenceElement=\"tip\">Show Tip</CalciteTooltip>\n      <div className=\"basemaps\">\n        <CalciteTabs position=\"below\" layout=\"center\" scale=\"m\">\n          <CalciteTabNav slot=\"tab-nav\">\n            <CalciteTabTitle>Maps</CalciteTabTitle>\n            <CalciteTabTitle>Images</CalciteTabTitle>\n            <CalciteTabTitle>Esri</CalciteTabTitle>\n            <CalciteTabTitle>Blend</CalciteTabTitle>\n          </CalciteTabNav>\n          <CalciteTab>\n            <div ref={basemapRef}></div>\n          </CalciteTab>\n          <CalciteTab>\n            <div ref={imagesRef}></div>\n          </CalciteTab>\n          <CalciteTab>\n            <div ref={esriRef}></div>\n          </CalciteTab>\n          <CalciteTab>\n            <Blend\n              view={view}\n              mapGroup={mapGroup}\n              imageGroup={imageGroup}\n            ></Blend>\n          </CalciteTab>\n        </CalciteTabs>\n        <CalciteAlert\n          active={showAlert.show === true ? true : undefined}\n          autoDismiss\n          autoDismissDuration=\"medium\"\n          color=\"yellow\"\n          label=\"Imagery Year Changed\"\n        >\n          <div slot=\"title\">Imagery Not Available</div>\n          <div slot=\"message\">{`Imagery for ${showAlert.from} only available inside Raleigh, base map has changed to ${showAlert.to}`}</div>\n        </CalciteAlert>\n      </div>\n    </CalcitePanel>\n  );\n}\n\nexport default React.memo(Basemaps);\n"],"names":["addBasemap","nextStep","evt","items","basemap","index","setActiveStep","view","map","baseLayers","removeAll","images","filter","layer","type","includes","removeMany","id","detail","selectedItems","value","item","find","load","then","WebMap","portalItem","loadAll","m","setTimeout","forEach","console","log","opacity","add","addMany","Blend","args","loaded","useRef","activeStep","useState","maps","setMaps","setImages","Basemap","useEffect","current","Portal","queryGroups","query","mapGroup","result","results","queryItems","imageGroup","className","layout","active","undefined","itemTitle","description","onClick","label","selectionMode","scale","onCalciteComboboxChange","title","textLabel","sort","a","b","max","min","step","getItemAt","length","maxLabel","minLabel","onCalciteSliderInput","target","React","imageryBoundary","inRaleigh","wasRaleigh","checkBoundary","extent","geometryEngine","intersects","filterBasemaps","tags","getBoundary","Promise","resolve","reject","request","responseType","response","Polygon","data","shape","viewExtentChanged","setShowAlert","source","basemaps","activeBasemap","refresh","match","from","at","to","show","checkBasemapTheme","baseLayer","reactiveUtils","background","getStyleLayer","color","Color","paint","isBright","setPropertyColor","isLight","allLayers","renderer","clone","symbol","outline","r","g","tips","text","setView","showAlert","isActive","setIsActive","basemapRef","imagesRef","esriRef","ref","BasemapGallery","container","initializeBasemaps","PortalBasemapsSource","filterFunction","updateBasemapsCallback","reverse","when","boundary","watch","initializeImageMaps","initializeEsriMaps","panelDismissed","useCallback","e","tipsClicked","showTips","Basemaps","useBasemaps","heading","hidden","closed","dismissed","dismissible","onCalcitePanelDismiss","icon","slot","referenceElement","position","autoDismiss","autoDismissDuration"],"sourceRoot":""}