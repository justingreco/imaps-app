{"version":3,"file":"static/js/4448.32bd4a1d.chunk.js","mappings":"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","sources":["components/Tools/Sketch/utils/sketch.ts","components/Tools/Sketch/ColorButton.tsx","components/Tools/Sketch/SizeSlider.tsx","components/Tools/Sketch/LineSymbols.tsx","components/Tools/Sketch/PolygonSymbols.tsx","components/Tools/Sketch/TextSymbols.tsx","components/Tools/Sketch/PointSymbols.tsx","components/Tools/Sketch/Sketch.tsx"],"sourcesContent":["import MapView from \"@arcgis/core/views/MapView\";\nimport SketchViewModel from \"@arcgis/core/widgets/Sketch/SketchViewModel\";\nimport MapNotesLayer from \"@arcgis/core/layers/MapNotesLayer\";\nimport GraphicsLayer from \"@arcgis/core/layers/GraphicsLayer\";\nimport Color from \"@arcgis/core/Color\";\nimport SimpleFillSymbol from \"@arcgis/core/symbols/SimpleFillSymbol\";\nimport SimpleLineSymbol from \"@arcgis/core/symbols/SimpleLineSymbol\";\nimport TextSymbol from \"@arcgis/core/symbols/TextSymbol\";\nimport WebStyleSymbol from \"@arcgis/core/symbols/WebStyleSymbol\";\nimport request from \"@arcgis/core/request\";\n\nlet pointLayer: GraphicsLayer;\nlet polylineLayer: GraphicsLayer;\nlet polygonLayer: GraphicsLayer;\nlet textLayer: GraphicsLayer;\nlet sketchLayer: MapNotesLayer;\nlet selectedTool: string = \"\";\nlet fillSymbol = new SimpleFillSymbol({\n  color: [255, 0, 0, 0.5],\n  style: \"solid\",\n  outline: {\n    width: 2,\n    color: [255, 0, 0, 1],\n  },\n});\nlet lineSymbol = new SimpleLineSymbol({\n  width: 1,\n  color: [255, 0, 0, 1],\n  style: \"solid\",\n  cap: \"round\",\n  join: \"round\",\n});\nlet textSymbol = new TextSymbol({\n  color: [255, 0, 0, 1],\n  haloColor: [255, 255, 255, 1],\n  haloSize: \"1px\",\n  text: \"\",\n  xoffset: 3,\n  yoffset: 3,\n  font: {\n    // autocasts as new Font()\n    size: 10,\n    family: \"Aerial\",\n    weight: \"bold\",\n  },\n});\nlet pointSketchViewModel: SketchViewModel;\nlet polylineSketchViewModel: SketchViewModel;\n\nlet polygonSketchViewModel: SketchViewModel;\n\nlet textSketchViewModel: SketchViewModel;\n\nexport function initializeSketchViewModel(view: MapView) {\n  sketchLayer = new MapNotesLayer({\n    listMode: \"hide\",\n    id: \"notes-layer\",\n  });\n  view.map.add(sketchLayer);\n  pointLayer = sketchLayer.pointLayer;\n  polylineLayer = sketchLayer.polylineLayer;\n  polygonLayer = sketchLayer.polygonLayer;\n\n  textLayer = sketchLayer.textLayer;\n  // create a new sketch view model for each different map note type\n  // this allows both the creation and modification of each different map note\n  pointSketchViewModel = createSketchViewModels(pointLayer, view, false);\n  polylineSketchViewModel = createSketchViewModels(polylineLayer, view, false);\n  polygonSketchViewModel = createSketchViewModels(polygonLayer, view, false);\n  polygonSketchViewModel.activeFillSymbol = fillSymbol;\n  (polylineSketchViewModel as any).activeLineSymbol = lineSymbol as any;\n\n  textSketchViewModel = createSketchViewModels(textLayer, view, true);\n}\n\nfunction createSketchViewModels(\n  layer: GraphicsLayer,\n  view: MapView,\n  isText: boolean\n) {\n  const sketchVM = new SketchViewModel({\n    view,\n    layer,\n    updateOnGraphicClick: true,\n  });\n  sketchVM.on(\"create\", addGraphic);\n  if (!isText) {\n    // sketchVM.on(\"update\", updateMapNotes);\n  }\n  return sketchVM;\n}\n\nfunction addGraphic(e: any) {\n  if (e.state === \"complete\") {\n    if (e.graphic.geometry.type === \"polygon\") {\n      e.graphic.symbol = fillSymbol;\n      sketchLayer.polygonLayer.add(e.graphic);\n      console.log(e.graphic.symbol.color);\n\n      //   setTimeout(() => polygonSketchViewModel.updateGraphics.add(e.graphic));\n\n      polygonSketchViewModel.create(e.tool);\n    }\n    if (e.graphic.geometry.type === \"polyline\") {\n      e.graphic.symbol = lineSymbol;\n      sketchLayer.polylineLayer.add(e.graphic);\n      polylineSketchViewModel.create(e.tool);\n    }\n    if (selectedTool === \"text\") {\n      e.graphic.symbol = textSymbol;\n      sketchLayer.textLayer.add(e.graphic);\n      textSketchViewModel.create(\"point\");\n    }\n  }\n}\n\nexport function toolSelected(\n  tool: string,\n  activeTool: string,\n  setActiveTool: Function\n) {\n  selectedTool = tool;\n  tool === activeTool ? setActiveTool(\"\") : setActiveTool(tool);\n  if (activeTool === \"\") {\n    cancelSketch();\n  }\n  if ([\"polygon\", \"rectangle\", \"circle\"].includes(tool)) {\n    polygonSketchViewModel.create(tool as any);\n  }\n  if ([\"polyline\"].includes(tool)) {\n    polylineSketchViewModel.create(tool as any);\n  }\n  if (tool === \"text\") {\n    polylineSketchViewModel.create(\"point\");\n  }\n}\n\nexport function polygonSymbolUpdated(\n  fillColor: Color,\n  outlineColor: Color,\n  width: number\n) {\n  fillSymbol.color = fillColor;\n  console.log(fillSymbol.color);\n  fillSymbol.outline.color = outlineColor;\n  fillSymbol.outline.width = width;\n  polygonSketchViewModel.activeFillSymbol = fillSymbol;\n  polygonSketchViewModel.updateGraphics.forEach((graphic) => {\n    graphic.symbol = fillSymbol;\n  });\n}\n\nexport function polylineSymbolUpdated(lineColor: Color, width: number) {\n  lineSymbol.color = lineColor;\n  lineSymbol.width = width;\n  polylineSketchViewModel.activeFillSymbol = lineSymbol as any;\n  polylineSketchViewModel.updateGraphics.forEach((graphic) => {\n    graphic.symbol = lineSymbol;\n  });\n}\n\nexport function textSymbolUpdated(\n  fontSize: number,\n  fontColor: Color,\n  haloSize: number,\n  haloColor: Color,\n  showHalo: boolean,\n  textContent: string\n) {\n  textSymbol.color = fontColor;\n  textSymbol.font.size = fontSize;\n  textSymbol.haloColor = haloColor;\n  textSymbol.haloSize = showHalo ? haloSize : 0;\n  textSymbol.text = textContent;\n  textSketchViewModel.pointSymbol = textSymbol as any;\n}\n\nfunction cancelSketch() {\n  pointSketchViewModel.cancel();\n  polylineSketchViewModel.cancel();\n  polygonSketchViewModel.cancel();\n  textSketchViewModel.cancel();\n}\n\nexport function clearSketch(setActiveTool: Function) {\n  setActiveTool(\"\");\n  cancelSketch();\n  sketchLayer.polygonLayer.graphics.removeAll();\n  sketchLayer.pointLayer.graphics.removeAll();\n  sketchLayer.polylineLayer.graphics.removeAll();\n  sketchLayer.textLayer.graphics.removeAll();\n}\n\nexport function getSymbols() {\n  return new Promise((resolve, reject) => {\n    const symbol: WebStyleSymbol = new WebStyleSymbol({\n      styleUrl:\n        \"http://www.arcgis.com/sharing/rest/content/items/70ccf6bcbd304773a164be896e76edd3/data\",\n      name: \"Centered Sphere\",\n    });\n\n    request(symbol.styleUrl).then((result) => {\n      resolve(result.data.items);\n    });\n  });\n}\n","import \"@esri/calcite-components/dist/components/calcite-color-picker-swatch\";\nimport \"@esri/calcite-components/dist/components/calcite-button\";\nimport \"@esri/calcite-components/dist/components/calcite-popover\";\nimport \"@esri/calcite-components/dist/components/calcite-color-picker\";\nimport \"@esri/calcite-components/dist/components/calcite-slider\";\nimport \"@esri/calcite-components/dist/components/calcite-input\";\nimport \"@esri/calcite-components/dist/components/calcite-label\";\n\nimport \"./Sketch.css\";\nimport Color from \"@arcgis/core/Color\";\nimport {\n  CalciteAction,\n  CalciteButton,\n  CalciteColorPicker,\n  CalciteColorPickerSwatch,\n  CalciteInput,\n  CalciteLabel,\n  CalcitePanel,\n  CalcitePopover,\n  CalciteSlider,\n} from \"@esri/calcite-components-react\";\nimport React, { useEffect, useRef, useState } from \"react\";\n\nfunction ColorButton(args: any) {\n  const popover = useRef<HTMLCalcitePopoverElement>(null);\n  const picker = useRef<HTMLCalciteColorPickerElement>(null);\n  const [color, setColor] = useState<Color>();\n  const [transparency, setTransparency] = useState<any>(0);\n  useEffect(() => {\n    if (args.color) {\n      setColor(new Color(args.color));\n      setTransparency((1 - args.color[3]) * 100);\n    }\n  }, [args.color]);\n\n  return (\n    <div id={args.id}>\n      <CalciteLabel>\n        {args.label} Color\n        <CalciteButton\n          id={`${args.id}-popover-button`}\n          width=\"half\"\n          iconEnd=\"pencil\"\n          color=\"neutral\"\n          appearance=\"outline\"\n        >\n          <CalciteColorPickerSwatch\n            color={color?.toHex()}\n          ></CalciteColorPickerSwatch>\n        </CalciteButton>\n      </CalciteLabel>\n      <CalcitePopover\n        ref={popover}\n        overlayPositioning=\"fixed\"\n        placement=\"top-leading\"\n        label={\"\"}\n        referenceElement={`${args.id}-popover-button`}\n      >\n        <CalcitePanel heading=\"Color\">\n          <CalciteAction\n            icon=\"x\"\n            text=\"\"\n            slot=\"header-actions-end\"\n            onClick={() => {\n              popover.current?.toggle();\n              const c = new Color(color);\n              c.a = 1 - transparency / 100;\n              args.colorSet(c);\n            }}\n          ></CalciteAction>\n          <CalciteColorPicker\n            ref={picker}\n            hideSaved\n            hideHex\n            hideChannels\n            value={color ? color.toHex() : \"#FF0000\"}\n            onCalciteColorPickerInput={(e) =>\n              setColor(new Color(e.target.value))\n            }\n          ></CalciteColorPicker>\n        </CalcitePanel>\n        {/* <CalciteButton\n          width=\"full\"\n          onClick={() => {\n            popover.current?.toggle();\n            const c = new Color(color);\n            c.a = 1 - transparency / 100;\n            args.colorSet(c);\n          }}\n        >\n          Done\n        </CalciteButton> */}\n      </CalcitePopover>\n      {!args.hideTransparency && (\n        <CalciteLabel>\n          {args.label} Transparency\n          <div className=\"slider-input\">\n            <CalciteSlider\n              max={100}\n              min={0}\n              value={transparency}\n              onCalciteSliderInput={(e) => {\n                let value: number = e.target.value as number;\n                if (value > 100) {\n                  value = 100;\n                }\n                if (value < 0) {\n                  value = 0;\n                }\n                setTransparency(value);\n                const c = new Color(color);\n                c.a = 1 - transparency / 100;\n                args.colorSet(c);\n              }}\n            ></CalciteSlider>\n            <CalciteInput\n              max={100}\n              min={0}\n              type=\"number\"\n              numberButtonType=\"none\"\n              suffixText=\"%\"\n              value={transparency}\n              onCalciteInputInput={(e) => {\n                let value: number = parseInt(e.target.value);\n                if (value > 100) {\n                  value = 100;\n                }\n                if (value < 0) {\n                  value = 0;\n                }\n\n                setTransparency(value);\n                const c = new Color(color);\n                c.a = 1 - transparency / 100;\n                args.colorSet(c);\n              }}\n            ></CalciteInput>\n          </div>\n        </CalciteLabel>\n      )}\n    </div>\n  );\n}\n\nexport default React.memo(ColorButton);\n","import \"@esri/calcite-components/dist/components/calcite-slider\";\nimport \"@esri/calcite-components/dist/components/calcite-input\";\nimport \"@esri/calcite-components/dist/components/calcite-label\";\nimport {\n  CalciteInput,\n  CalciteLabel,\n  CalciteSlider,\n} from \"@esri/calcite-components-react\";\nimport { useEffect, useState } from \"react\";\nimport React from \"react\";\n\nfunction SizeSlider(args: any) {\n  const [value, setValue] = useState<any>();\n  useEffect(() => {\n    setValue(args.value);\n  }, [args.value]);\n  return (\n    <CalciteLabel>\n      {args.label}\n      <div className=\"slider-input\">\n        <CalciteSlider\n          max={args.max}\n          min={args.min}\n          value={value}\n          onCalciteSliderInput={(e) => {\n            setValue(e.target.value);\n            args.sizeSet(e.target.value);\n          }}\n        ></CalciteSlider>\n        <CalciteInput\n          type=\"number\"\n          numberButtonType=\"none\"\n          min={args.min}\n          max={args.max}\n          value={value}\n          suffixText=\"px\"\n          onCalciteInputInput={(e) => {\n            setValue(parseFloat(e.target.value));\n            args.sizeSet(parseFloat(e.target.value));\n          }}\n        ></CalciteInput>\n      </div>\n    </CalciteLabel>\n  );\n}\nexport default React.memo(SizeSlider);\n","import \"@esri/calcite-components/dist/components/calcite-color-picker-swatch\";\nimport \"@esri/calcite-components/dist/components/calcite-button\";\nimport \"./Sketch.css\";\nimport {\n  CalciteButton,\n  CalciteColorPickerSwatch,\n  CalciteInput,\n  CalciteLabel,\n} from \"@esri/calcite-components-react\";\nimport React, { useState } from \"react\";\nimport ColorButton from \"./ColorButton\";\nimport SizeSlider from \"./SizeSlider\";\nimport Color from \"@arcgis/core/Color\";\n\nfunction LineSymbols(args: any) {\n  const [lineColor, setLineColor] = useState<Color>(new Color([255, 0, 0, 1]));\n  const [width, setWidth] = useState(2);\n\n  return (\n    <div id=\"line-symbols\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"60\"\n        height={width.toString()}\n      >\n        <defs></defs>\n        <g transform=\"matrix(1,0,0,1,0,0)\">\n          <path\n            fill=\"none\"\n            fillRule=\"evenodd\"\n            stroke={lineColor?.toString()}\n            strokeWidth={width}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeDasharray=\"none\"\n            strokeMiterlimit=\"4\"\n            d={`M ${(width / 2).toString()} ${(width / 2).toString()} L 49.5 ${(\n              width / 2\n            ).toString()}`}\n          ></path>\n        </g>\n      </svg>\n      <ColorButton\n        id=\"line\"\n        label=\"Line\"\n        color={lineColor.toRgba()}\n        colorSet={(c: any) => {\n          setLineColor(c);\n          args.polylineSymbolUpdated(c, width);\n        }}\n      ></ColorButton>\n      <SizeSlider\n        value={width}\n        min={0.1}\n        max={18}\n        label=\"Width\"\n        sizeSet={(size: number) => {\n          setWidth(size);\n          args.polylineSymbolUpdated(lineColor, width);\n        }}\n      ></SizeSlider>\n    </div>\n  );\n}\n\nexport default React.memo(LineSymbols);\n","import Color from \"@arcgis/core/Color\";\nimport React, { useState } from \"react\";\nimport ColorButton from \"./ColorButton\";\nimport SizeSlider from \"./SizeSlider\";\n\nfunction PolygonSymbols(args: any) {\n  const [fillColor, setFillColor] = useState<Color>(\n    new Color([255, 0, 0, 0.5])\n  );\n  const [outlineColor, setOutlineColor] = useState<Color>(\n    new Color([255, 0, 0, 1])\n  );\n  const [width, setWidth] = useState(2);\n  return (\n    <div id=\"polygon-symbols\">\n      <div>\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={(23 + width).toString()}\n          height={(23 + width).toString()}\n        >\n          <defs></defs>\n          <g\n            transform={`matrix(${(\n              1.09523809 -\n              width * 0.004328966\n            ).toString()},0,0,${(\n              1.09523809 -\n              width * 0.004328966\n            ).toString()},${(width * 0.5 + 11).toString()},${(\n              width * 0.5 +\n              11\n            ).toString()})`}\n          >\n            <path\n              vectorEffect=\"non-scaling-stroke\"\n              fill={fillColor?.toString()}\n              fillRule=\"evenodd\"\n              stroke={outlineColor?.toString()}\n              strokeWidth={width}\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeDasharray=\"none\"\n              strokeMiterlimit=\"4\"\n              d=\"M -10,-10 L 10,0 L 10,10 L -10,10 L -10,-10 Z\"\n            ></path>\n          </g>\n        </svg>\n      </div>\n      <ColorButton\n        id=\"polygon-fill\"\n        color={fillColor.toRgba()}\n        label=\"Fill\"\n        colorSet={(c: any) => {\n          setFillColor(c);\n          console.log(c);\n          args.polygonSymbolUpdated(c, outlineColor, width);\n        }}\n      ></ColorButton>\n      <ColorButton\n        id=\"polygon-outline\"\n        color={outlineColor.toRgba()}\n        label=\"Outline\"\n        colorSet={(c: any) => {\n          setOutlineColor(c);\n          args.polygonSymbolUpdated(fillColor, c, width);\n        }}\n      ></ColorButton>\n      <SizeSlider\n        label=\"Outline Width\"\n        min={0.1}\n        max={18}\n        value={width}\n        sizeSet={(size: any) => {\n          setWidth(size);\n          args.polygonSymbolUpdated(fillColor, outlineColor, width);\n        }}\n      ></SizeSlider>\n    </div>\n  );\n}\n\nexport default React.memo(PolygonSymbols);\n","import \"@esri/calcite-components/dist/components/calcite-input\";\nimport \"@esri/calcite-components/dist/components/calcite-label\";\nimport Color from \"@arcgis/core/Color\";\nimport {\n  CalciteInput,\n  CalciteLabel,\n  CalciteSwitch,\n} from \"@esri/calcite-components-react\";\nimport React, { useState } from \"react\";\nimport ColorButton from \"./ColorButton\";\n\nfunction TextSymbols(args: any) {\n  const [fontColor, setFontColor] = useState<Color>(new Color([255, 0, 0, 1]));\n  const [fontSize, setFontSize] = useState(10);\n  const [showHalo, setShowHalo] = useState(false);\n  const [haloSize, setHaloSize] = useState(1);\n  const [haloColor, setHaloColor] = useState<Color>(\n    new Color([255, 255, 255, 1])\n  );\n  const [textContent, setTextContent] = useState(\"\");\n\n  return (\n    <div id=\"text-symbols\">\n      <CalciteLabel>\n        Text\n        <CalciteInput\n          type=\"textarea\"\n          scale=\"m\"\n          value={textContent}\n          onCalciteInputInput={(e) => {\n            setTextContent(e.target.value);\n          }}\n          onCalciteInputChange={(e) => {\n            requestAnimationFrame(() => {\n              args.textSymbolUpdated(\n                fontSize,\n                fontColor,\n                haloSize,\n                haloColor,\n                showHalo,\n                textContent\n              );\n            });\n          }}\n        ></CalciteInput>\n      </CalciteLabel>\n      <ColorButton\n        id=\"font\"\n        label=\"Font\"\n        color={fontColor.toRgba()}\n        hideTransparency\n        colorSet={(c: any) => {\n          setFontColor(c);\n          args.textSymbolUpdated(\n            fontSize,\n            c,\n            haloSize,\n            haloColor,\n            showHalo,\n            textContent\n          );\n        }}\n      ></ColorButton>\n      <CalciteLabel>\n        Font Size\n        <CalciteInput\n          type=\"number\"\n          min={5}\n          max={125}\n          value={fontSize.toString()}\n          onCalciteInputInput={(e) => {\n            setFontSize(parseFloat(e.target.value));\n            args.textSymbolUpdated(\n              fontSize,\n              fontColor,\n              haloSize,\n              haloColor,\n              showHalo,\n              textContent\n            );\n          }}\n        ></CalciteInput>\n      </CalciteLabel>\n      <CalciteLabel layout=\"inline\">\n        Halo\n        <CalciteSwitch\n          checked={showHalo ? true : undefined}\n          onCalciteSwitchChange={(e) => {\n            setShowHalo(e.target.checked);\n            args.textSymbolUpdated(\n              fontSize,\n              fontColor,\n              haloSize,\n              haloColor,\n              showHalo,\n              textContent\n            );\n          }}\n        ></CalciteSwitch>\n      </CalciteLabel>\n      <div id=\"halo\" hidden={showHalo ? undefined : true}>\n        <ColorButton\n          id=\"halo\"\n          label=\"\"\n          color={haloColor.toRgba()}\n          hideTransparency\n          colorSet={(c: any) => {\n            setHaloColor(c);\n            args.textSymbolUpdated(\n              fontSize,\n              fontColor,\n              haloSize,\n              c,\n              showHalo,\n              textContent\n            );\n          }}\n        ></ColorButton>\n        <CalciteLabel>\n          Size\n          <CalciteInput\n            type=\"number\"\n            min={1}\n            max={10}\n            value={haloSize.toString()}\n            onCalciteInputInput={(e) => {\n              setHaloSize(parseFloat(e.target.value));\n              args.textSymbolUpdated(\n                fontSize,\n                fontColor,\n                haloSize,\n                haloColor,\n                showHalo,\n                textContent\n              );\n            }}\n          ></CalciteInput>\n        </CalciteLabel>\n      </div>\n    </div>\n  );\n}\nexport default React.memo(TextSymbols);\n","import \"@esri/calcite-components/dist/components/calcite-combobox\";\nimport \"@esri/calcite-components/dist/components/calcite-combobox-item\";\nimport {\n  CalciteButton,\n  CalciteCombobox,\n  CalciteComboboxItem,\n  CalcitePopover,\n} from \"@esri/calcite-components-react\";\nimport React, { useEffect, useState } from \"react\";\nimport { getSymbols } from \"./utils/sketch\";\n\nfunction PointSymbols(args: any) {\n  const [symbols, setSymbols] = useState<any[]>([]);\n  useEffect(() => {\n    getSymbols().then((items) => setSymbols(items as any[]));\n  }, []);\n  return (\n    <div id=\"point-symbols\">\n      <CalcitePopover label=\"Icons\" referenceElement=\"popover-button\">\n        <div id=\"symbols\">\n          {symbols.map((symbol, i) => {\n            return <div key={i} id={`pin-${i}`}></div>;\n          })}\n        </div>\n      </CalcitePopover>\n      <CalciteButton id=\"popover-button\">Activate Popover</CalciteButton>\n    </div>\n  );\n}\n\nexport default React.memo(PointSymbols);\n","import React, { useEffect, useRef, useState } from \"react\";\nimport \"@esri/calcite-components/dist/components/calcite-action\";\nimport \"@esri/calcite-components/dist/components/calcite-action-group\";\n\nimport {\n  CalciteAction,\n  CalciteActionGroup,\n} from \"@esri/calcite-components-react\";\nimport \"./Sketch.css\";\nimport {\n  clearSketch,\n  initializeSketchViewModel,\n  polygonSymbolUpdated,\n  polylineSymbolUpdated,\n  textSymbolUpdated,\n  toolSelected,\n} from \"./utils/sketch\";\nimport LineSymbols from \"./LineSymbols\";\nimport PolygonSymbols from \"./PolygonSymbols\";\nimport TextSymbols from \"./TextSymbols\";\nimport PointSymbols from \"./PointSymbols\";\nfunction Sketch(args: any) {\n  const loaded = useRef(false);\n  const [activeTool, setActiveTool] = useState(\"\");\n  useEffect(() => {\n    if (!loaded.current) {\n      initializeSketchViewModel(args.view);\n    }\n  }, []);\n  return (\n    <div id=\"sketch-tools\">\n      <div className=\"sticky\">\n        <CalciteActionGroup layout=\"horizontal\">\n          <CalciteAction\n            active={activeTool === \"point\" ? true : undefined}\n            icon=\"pin\"\n            text={\"\"}\n            onClick={() => toolSelected(\"point\", activeTool, setActiveTool)}\n          ></CalciteAction>\n          <CalciteAction\n            active={activeTool === \"polyline\" ? true : undefined}\n            icon=\"line\"\n            text={\"\"}\n            onClick={() => toolSelected(\"polyline\", activeTool, setActiveTool)}\n          ></CalciteAction>\n          <CalciteAction\n            active={activeTool === \"polygon\" ? true : undefined}\n            icon=\"polygon\"\n            text={\"\"}\n            onClick={() => toolSelected(\"polygon\", activeTool, setActiveTool)}\n          ></CalciteAction>\n          <CalciteAction\n            active={activeTool === \"rectangle\" ? true : undefined}\n            icon=\"rectangle\"\n            text={\"\"}\n            onClick={() => toolSelected(\"rectangle\", activeTool, setActiveTool)}\n          ></CalciteAction>\n          <CalciteAction\n            active={activeTool === \"circle\" ? true : undefined}\n            icon=\"circle\"\n            text={\"\"}\n            onClick={() => toolSelected(\"circle\", activeTool, setActiveTool)}\n          ></CalciteAction>\n          <CalciteAction\n            active={activeTool === \"text\" ? true : undefined}\n            icon=\"text\"\n            text={\"\"}\n            onClick={() => toolSelected(\"text\", activeTool, setActiveTool)}\n          ></CalciteAction>\n        </CalciteActionGroup>\n        <CalciteActionGroup layout=\"horizontal\">\n          <CalciteAction icon=\"cursor\" text={\"\"}></CalciteAction>\n          <CalciteAction\n            icon=\"trash\"\n            text={\"\"}\n            onClick={() => clearSketch(setActiveTool)}\n          ></CalciteAction>\n        </CalciteActionGroup>\n      </div>\n      <div\n        id=\"point-symbols\"\n        className=\"symbol\"\n        hidden={activeTool !== \"point\" ? true : undefined}\n      >\n        <PointSymbols></PointSymbols>\n      </div>\n      <div\n        id=\"line-symbols\"\n        className=\"symbol\"\n        hidden={activeTool !== \"polyline\" ? true : undefined}\n      >\n        <LineSymbols\n          polylineSymbolUpdated={polylineSymbolUpdated}\n        ></LineSymbols>\n      </div>\n      <div\n        id=\"polygon-symbols\"\n        className=\"symbol\"\n        hidden={\n          ![\"polygon\", \"rectangle\", \"circle\"].includes(activeTool)\n            ? true\n            : undefined\n        }\n      >\n        <PolygonSymbols\n          polygonSymbolUpdated={polygonSymbolUpdated}\n        ></PolygonSymbols>\n      </div>\n      <div\n        id=\"text-symbols\"\n        className=\"symbol\"\n        hidden={activeTool !== \"text\" ? true : undefined}\n      >\n        <TextSymbols textSymbolUpdated={textSymbolUpdated}></TextSymbols>\n      </div>\n    </div>\n  );\n}\n\nexport default React.memo(Sketch);\n"],"names":["pointLayer","polylineLayer","polygonLayer","textLayer","sketchLayer","pointSketchViewModel","polylineSketchViewModel","polygonSketchViewModel","textSketchViewModel","selectedTool","fillSymbol","SimpleFillSymbol","color","style","outline","width","lineSymbol","SimpleLineSymbol","cap","join","textSymbol","TextSymbol","haloColor","haloSize","text","xoffset","yoffset","font","size","family","weight","createSketchViewModels","layer","view","isText","sketchVM","SketchViewModel","updateOnGraphicClick","on","addGraphic","e","state","graphic","geometry","type","symbol","add","console","log","create","tool","toolSelected","activeTool","setActiveTool","cancelSketch","includes","polygonSymbolUpdated","fillColor","outlineColor","activeFillSymbol","updateGraphics","forEach","polylineSymbolUpdated","lineColor","textSymbolUpdated","fontSize","fontColor","showHalo","textContent","pointSymbol","cancel","ColorButton","args","popover","useRef","picker","setColor","useState","transparency","setTransparency","useEffect","Color","id","label","iconEnd","appearance","toHex","ref","overlayPositioning","placement","referenceElement","heading","icon","slot","onClick","current","toggle","c","a","colorSet","hideSaved","hideHex","hideChannels","value","onCalciteColorPickerInput","target","hideTransparency","className","max","min","onCalciteSliderInput","numberButtonType","suffixText","onCalciteInputInput","parseInt","React","SizeSlider","setValue","sizeSet","parseFloat","LineSymbols","setLineColor","setWidth","xmlns","height","toString","transform","fill","fillRule","stroke","strokeWidth","strokeLinecap","strokeLinejoin","strokeDasharray","strokeMiterlimit","d","toRgba","PolygonSymbols","setFillColor","setOutlineColor","vectorEffect","TextSymbols","setFontColor","setFontSize","setShowHalo","setHaloSize","setHaloColor","setTextContent","scale","onCalciteInputChange","requestAnimationFrame","layout","checked","undefined","onCalciteSwitchChange","hidden","PointSymbols","symbols","setSymbols","Promise","resolve","reject","WebStyleSymbol","styleUrl","name","request","then","result","data","items","map","i","Sketch","loaded","MapNotesLayer","listMode","activeLineSymbol","active","graphics","removeAll","clearSketch"],"sourceRoot":""}