{"version":3,"file":"static/js/7585.43ed8712.chunk.js","mappings":"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","sources":["components/Panels/Property/utils/addresses.ts","components/Panels/Property/AddressTable/AddressTable.tsx"],"sourcesContent":["import MapView from \"@arcgis/core/views/MapView\";\nimport FeatureTable from \"@arcgis/core/widgets/FeatureTable\";\nimport FeatureLayer from \"@arcgis/core/layers/FeatureLayer\";\nimport FieldColumnTemplate from \"@arcgis/core/widgets/FeatureTable/support/FieldColumnTemplate\";\nimport TableTemplate from \"@arcgis/core/widgets/FeatureTable/support/TableTemplate\";\nimport FeatureSet from \"@arcgis/core/rest/support/FeatureSet\";\nimport Graphic from \"@arcgis/core/Graphic\";\nimport ButtonMenuItem from \"@arcgis/core/widgets/FeatureTable/Grid/support/ButtonMenuItem\";\n\nimport PictureMarkerSymbol from \"@arcgis/core/symbols/PictureMarkerSymbol\";\nlet featureTable: FeatureTable;\nexport function initializeFeatureTable(\n  ref: HTMLDivElement,\n  view: MapView,\n  featureSelected: Function\n): Promise<FeatureTable> {\n  return new Promise((resolve, reject) => {\n    getTableLayer(view).then((table: any) => {\n      featureTable = new FeatureTable({\n        container: ref,\n        view: view,\n        editingEnabled: false,\n        multiSortEnabled: true,\n        visibleElements: {\n          selectionColumn: false,\n          menuItems: {\n            refreshData: false,\n            toggleColumns: false\n          },\n        },\n        menuConfig: {\n          items: [\n            new ButtonMenuItem({\n              label: \"Export\",\n              iconClass: \"esri-icon-download\",\n              clickFunction: () => {\n                exportTable(featureTable);\n              },\n            }),\n          ],\n        },\n        tableTemplate: getTableTemplate(table),\n        layer: table,\n      });\n      featureTable?.when(() => {\n        resolve(featureTable);\n        initializeGrid(featureTable);\n        featureTable.on(\"selection-change\", (e) => {\n          if (e.added.length) {\n            (featureTable.layer as __esri.FeatureLayer)\n              .queryFeatures({\n                objectIds: [e.added[0].feature.getObjectId()],\n                returnGeometry: true,\n              })\n              .then((featureSet) => {\n                if (featureSet.features.length) {\n                  const feature = featureSet.features[0];\n                  feature.setAttribute(\"type\", \"address\");\n                  feature.symbol = new PictureMarkerSymbol({\n                    url: \"assets/pin.svg\",\n                    height: 24,\n                    width: 24,\n                  });\n                  view.graphics.removeMany(\n                    view.graphics.filter((graphic) => {\n                      return graphic.getAttribute(\"type\") === \"address\";\n                    })\n                  );\n\n                  view.graphics.add(feature);\n\n                  view.goTo(\n                    { target: feature, zoom: 18 },\n                    { easing: \"ease-in-out\", duration: 1000 }\n                  );\n                }\n              });\n          }\n        });\n      });\n    });\n  });\n}\nfunction initializeGrid(featureTable: FeatureTable) {\n  (featureTable as any).grid.findColumn(\"ADDRESS\").width = 150;\n  (featureTable as any).grid.findColumn(\"FEATURETYPE\").width = 150;\n  setTimeout(() => {\n    const grid = (featureTable.container as HTMLElement).querySelector(\n      \"vaadin-grid\"\n    ) as any;\n\n    // (featureTable as any).grid.findColumn(\"SITE_ADDRESS\").width = 130;\n\n    grid?.addEventListener(\"click\", (e: any) => {\n      if ((e.target as HTMLElement).nodeName === \"VAADIN-GRID-CELL-CONTENT\") {\n        //grid.selectItem((grid.getEventContext(e) as any)?.item);\n\n        featureTable.clearSelection();\n        const item = (grid.getEventContext(e) as any)?.item;\n        const feature = item.feature;\n        //            featureTable.view.goTo(feature);\n        featureTable.selectRows(feature);\n      }\n    });\n  }, 2000);\n}\nlet addressLayer: FeatureLayer;\n\nfunction getTableLayer(view: MapView) {\n  return new Promise((resolve, reject) => {\n    const layer = new FeatureLayer({\n      portalItem: {\n        id: \"318be24592ea4dcba042511b3125fd53\",\n      },\n      layerId: 2,\n    });\n    addressLayer = layer;\n    layer.load().then((table) => {\n      const copyTable = new FeatureLayer({\n        source: [],\n        fields: table.fields,\n        geometryType: \"point\",\n        spatialReference: view.spatialReference,\n        popupTemplate: table.popupTemplate,\n        objectIdField: table.objectIdField,\n        displayField: table.displayField,\n        id: \"feature-table\",\n      });\n      copyTable.fields.forEach((field) => {\n        field.nullable = true;\n        if (field.name === \"DEED_DATE\") {\n          field.type = \"string\";\n        }\n      });\n      view.map.allTables.add(copyTable);\n\n      copyTable\n        .load()\n        .then((copyTable: FeatureLayer) => {\n          resolve(copyTable);\n        })\n        .catch((reason) => {\n          console.log(reason);\n        });\n    });\n  });\n}\nfunction getTableTemplate(layer: __esri.FeatureLayer): TableTemplate {\n  const tableTemplate: TableTemplate = new TableTemplate({\n    columnTemplates: [\n      new FieldColumnTemplate({\n        label: \"Address\",\n        fieldName: \"ADDRESS\",\n        editable: false,\n        initialSortPriority: 0,\n        direction: \"asc\",\n      }),\n      new FieldColumnTemplate({\n        label: \"Type\",\n        fieldName: \"FEATURETYPE\",\n        editable: false,\n        initialSortPriority: 1,\n        direction: \"asc\",\n      }),\n    ],\n  });\n  return tableTemplate;\n}\n\nexport function updateTable(property: Graphic, featureTable: FeatureTable) {\n  if (featureTable) {\n    addressLayer\n      ?.queryFeatures({\n        geometry: property.geometry,\n        outFields: [\"ADDRESS\", \"FEATURETYPE\"],\n        returnGeometry: true,\n      })\n      .then((featureSet) => {\n        (featureTable.layer as __esri.FeatureLayer)\n          .queryFeatures({\n            where: \"1=1\",\n            returnGeometry: true,\n          })\n          .then((result: FeatureSet) => {\n            (featureTable.layer as __esri.FeatureLayer)\n              .applyEdits({ deleteFeatures: result.features })\n              .then((result) => {\n                (featureTable.layer as __esri.FeatureLayer)\n                  .applyEdits({ addFeatures: featureSet.features })\n                  .then((result) => {\n                    featureTable.refresh();\n                  })\n                  .catch((reason) => {\n                    console.log(reason);\n                  });\n              })\n              .catch((reason) => {\n                console.log(reason);\n              });\n          });\n      });\n  }\n}\n\nconst exportTable = (table: FeatureTable): void => {\n  (table.layer as FeatureLayer)\n    .queryFeatures({\n      where: \"1=1\",\n      outFields: [\"*\"],\n      orderByFields: [\"ADDRESS\", \"FEATURETYPE\"],\n    })\n    .then((result) => {\n      let csv = \"\";\n      (\n        table.tableTemplate.columnTemplates as __esri.FieldColumnTemplate[]\n      ).forEach((field: __esri.FieldColumnTemplate) => {\n        csv += `${field.label},`;\n      });\n      csv += \"\\r\\n\";\n      result.features.forEach((feature) => {\n        (\n          table.tableTemplate.columnTemplates as __esri.FieldColumnTemplate[]\n        ).forEach((field: __esri.FieldColumnTemplate) => {\n          if (feature.attributes[field.fieldName]) {\n            csv += `\"${feature.attributes[field.fieldName]}\",`;\n          } else {\n            csv += `\"\",`;\n          }\n        });\n        csv += \"\\r\\n\";\n      });\n      let datestr = new Date().toISOString();\n      datestr = datestr.replaceAll(\":\", \"\").replaceAll(\"-\", \"\");\n      const exportedFilename = `imaps_addresses_export_${datestr}.csv`;\n\n      const blob = new Blob([csv], { type: \"text/csv;charset=utf-8;\" });\n      const link = document.createElement(\"a\");\n      if (link.download !== undefined) {\n        const url = URL.createObjectURL(blob);\n        link.setAttribute(\"href\", url);\n        link.setAttribute(\"download\", exportedFilename);\n        link.style.visibility = \"hidden\";\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        \n      }\n    });\n};\n","import React, { useEffect, useRef } from \"react\";\nimport { initializeFeatureTable, updateTable } from \"../utils/addresses\";\nimport \"./AddressTable.css\";\nfunction AddressTable(args: any) {\n  const ref = useRef() as any;\n  const loaded = useRef(false);\n\n  useEffect(() => {\n    if (!loaded.current) {\n      loaded.current = true;\n\n      initializeFeatureTable(ref.current, args.view, args.featureSelected).then(\n        (table: __esri.FeatureTable) => {\n          updateTable(args.property, table);\n        }\n      );\n    }\n    return () => {\n      //featureTable && featureTable?.destroy();\n    };\n  }, []);\n\n  return <div id=\"address-table\" ref={ref}></div>;\n}\n\nexport default React.memo(AddressTable);\n"],"names":["featureTable","addressLayer","initializeFeatureTable","ref","view","featureSelected","Promise","resolve","reject","layer","FeatureLayer","portalItem","id","layerId","load","then","table","copyTable","source","fields","geometryType","spatialReference","popupTemplate","objectIdField","displayField","forEach","field","nullable","name","type","map","allTables","add","catch","reason","console","log","getTableLayer","FeatureTable","container","editingEnabled","multiSortEnabled","visibleElements","selectionColumn","menuItems","refreshData","toggleColumns","menuConfig","items","ButtonMenuItem","label","iconClass","clickFunction","exportTable","tableTemplate","getTableTemplate","when","grid","findColumn","width","setTimeout","querySelector","addEventListener","e","target","nodeName","clearSelection","feature","getEventContext","item","selectRows","initializeGrid","on","added","length","queryFeatures","objectIds","getObjectId","returnGeometry","featureSet","features","setAttribute","symbol","PictureMarkerSymbol","url","height","graphics","removeMany","filter","graphic","getAttribute","goTo","zoom","easing","duration","TableTemplate","columnTemplates","FieldColumnTemplate","fieldName","editable","initialSortPriority","direction","where","outFields","orderByFields","result","csv","attributes","datestr","Date","toISOString","replaceAll","exportedFilename","blob","Blob","link","document","createElement","undefined","download","URL","createObjectURL","style","visibility","body","appendChild","click","removeChild","AddressTable","args","useRef","loaded","useEffect","current","property","geometry","applyEdits","deleteFeatures","addFeatures","refresh","updateTable","React"],"sourceRoot":""}