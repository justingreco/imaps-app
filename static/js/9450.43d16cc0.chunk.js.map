{"version":3,"file":"static/js/9450.43d16cc0.chunk.js","mappings":"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","sources":["components/Panels/Property/Services/ServiceLayer.tsx","components/Panels/Property/utils/services.ts","components/Panels/Property/Services/Services.tsx"],"sourcesContent":["import Feature from \"@arcgis/core/widgets/Feature\";\nimport React from \"react\";\nimport { useEffect, useRef } from \"react\";\n\nexport const ServiceLayer = (args: any) => {\n  const ref = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (args.feature) {\n      new Feature({\n        container: ref.current as HTMLDivElement,\n        graphic: args.feature,\n      });\n    }\n  }, [args.feature]);\n  return <div ref={ref}></div>;\n};\nexport default ServiceLayer;\n","import Graphic from \"@arcgis/core/Graphic\";\nimport MapView from \"@arcgis/core/views/MapView\";\nimport * as geometryEngine from \"@arcgis/core/geometry/geometryEngine\";\nimport WebMap from \"@arcgis/core/WebMap\";\nfunction loadWebmap(serviceLayers: any[]): Promise<__esri.Layer[]> {\n  return new Promise((resolve, reject) => {\n    const map = new WebMap({\n      portalItem: {\n        id: \"95092428774c4b1fb6a3b6f5fed9fbc4\",\n      },\n    });\n\n    map.load().then(() => {\n      const layers = map.allLayers.filter((layer: __esri.Layer) => {\n        return serviceLayers.includes(layer.title);\n      });\n      resolve(layers.toArray());\n    });\n  });\n}\nfunction getServiceData(\n  layers: any[],\n  graphic: Graphic,\n  setFeatures: Function,\n  setSearching: Function,\n  promises: Promise<__esri.FeatureSet>[]\n) {\n  layers?.forEach((layer) => {\n    if (layer.type === \"feature\") {\n      promises.push(\n        (layer as __esri.FeatureLayer).queryFeatures({\n          geometry: geometryEngine.geodesicBuffer(\n            (graphic as __esri.Graphic).geometry,\n            -5,\n            9002\n          ) as __esri.Geometry,\n          outFields: [\"*\"],\n          returnGeometry: true,\n        })\n      );\n    }\n  });\n  const list: Graphic[] = [];\n  if (promises.length) {\n    return Promise.all(promises).then((results) => {\n      results.forEach((result) => {\n        if (result.features.length) {\n          result.features.forEach((feature: __esri.Graphic) => {\n            list.push(feature);\n          });\n        }\n      });\n      setSearching(false);\n      setFeatures(list);\n    });\n  }\n}\nexport function getServices(\n  e: any,\n  services: any[],\n  view: MapView,\n  graphic: Graphic,\n  setFeatures: Function,\n  setSearching: Function\n) {\n  requestAnimationFrame(() => {\n    if ((e.target as HTMLCalciteAccordionItemElement).hasAttribute(\"active\")) {\n      setSearching(true);\n      setFeatures([]);\n      const title = (e.target as HTMLCalciteAccordionItemElement).getAttribute(\n        \"item-title\"\n      );\n      const service = services.find((s) => {\n        return s.group.title === title;\n      });\n      const promises: Promise<__esri.FeatureSet>[] = [];\n\n      if (service) {\n        let layers = view?.map.allLayers.filter((layer) => {\n          return service.group.layers.includes(layer.title);\n        });\n\n        if (layers.length !== service.group.layers.length) {\n          loadWebmap(service.group.layers).then((layers: any[]) => {\n            getServiceData(\n              layers,\n              graphic,\n              setFeatures,\n              setSearching,\n              promises\n            );\n          });\n        } else {\n          getServiceData(\n            layers.toArray(),\n            graphic,\n            setFeatures,\n            setSearching,\n            promises\n          );\n        }\n      }\n    }\n  });\n}\n","import {\n  CalciteAccordion,\n  CalciteAccordionItem,\n  CalciteScrim,\n} from \"@esri/calcite-components-react\";\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { services } from \"../../../../config/config\";\n\nimport ServiceLayer from \"./ServiceLayer\";\nimport { getServices } from \"../utils/services\";\n\nexport const Services = (args: any) => {\n  const [view, setView] = useState<__esri.MapView>();\n  const [graphic, setGraphic] = useState<__esri.Graphic>();\n  const [features, setFeatures] = useState<__esri.Graphic[]>([]);\n  const [searching, setSearching] = useState(false);\n\n  useEffect(() => {\n    if (args.view) {\n      setView(args.view);\n    }\n    if (args.graphic) {\n      setGraphic(args.graphic);\n    }\n  }, []);\n\n  return (\n    <CalciteAccordion selectionMode=\"single\">\n      {services.map((service) => {\n        return (\n          <CalciteAccordionItem\n            key={service.group.title}\n            item-title={service.group.title}\n            heading={service.group.title}\n            onClick={(e) => {\n              if (view && graphic) {\n                getServices(\n                  e,\n                  services,\n                  view,\n                  graphic,\n                  setFeatures,\n                  setSearching\n                );\n              }\n            }}\n          >\n            {features.map((feature, i) => {\n              return <ServiceLayer key={i} feature={feature}></ServiceLayer>;\n            })}\n            {features.length === 0 && <div>No information available.</div>}\n          </CalciteAccordionItem>\n        );\n      })}\n      <CalciteScrim\n        loading\n        hidden={searching ? undefined : true}\n      ></CalciteScrim>\n    </CalciteAccordion>\n  );\n};\nexport default Services;\n"],"names":["args","ref","useRef","useEffect","feature","Feature","container","current","graphic","getServiceData","layers","setFeatures","setSearching","promises","forEach","layer","type","push","queryFeatures","geometry","geometryEngine","geodesicBuffer","outFields","returnGeometry","list","length","Promise","all","then","results","result","features","getServices","e","services","view","requestAnimationFrame","target","hasAttribute","title","getAttribute","service","find","s","group","map","allLayers","filter","includes","serviceLayers","resolve","reject","WebMap","portalItem","id","load","toArray","Services","setView","useState","setGraphic","searching","selectionMode","heading","onClick","i","loading","hidden","undefined"],"sourceRoot":""}