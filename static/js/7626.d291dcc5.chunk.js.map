{"version":3,"file":"static/js/7626.d291dcc5.chunk.js","mappings":"mMAAO,MAAMA,EAAO,CAACC,MAAO,cAAeD,KAAM,CAC7C,CACIC,MAAO,oBACPC,KAAM,4LCiCd,EA/BmBC,IACnB,MAAMC,GAAMC,EAAAA,EAAAA,UACJC,GAASD,EAAAA,EAAAA,SAAO,IACfE,EAAQC,IAAaC,EAAAA,EAAAA,aACrBC,EAAUC,IAAeF,EAAAA,EAAAA,WAAS,IAEzCG,EAAAA,EAAAA,YAAU,KACHN,EAAOO,UACVP,EAAOO,SAAU,EACjBL,ECZC,SAA0BJ,EAAqBU,GAKpD,OAJe,IAAIC,EAAAA,QAAO,CACxBD,KAAMA,EACNE,UAAWZ,GAGd,CDMea,CAAiBb,EAAIS,QAASV,EAAMW,QAEzC,KACLP,IAAM,OAAIA,QAAJ,IAAIA,GAAAA,EAAQW,UAAlB,IAED,KACHN,EAAAA,EAAAA,YAAU,KACRD,EAAYR,EAAMO,SAAlB,GACC,CAACP,EAAMO,WACV,MAAMS,GAAiBC,EAAAA,EAAAA,cAAaC,IAClClB,EAAMgB,gBAAN,GACC,IACKG,GAAcF,EAAAA,EAAAA,cAAaC,IAC7BlB,EAAMoB,SAASvB,EAAf,GACG,IACP,MAAO,CACHI,MACAM,WACAS,iBACAG,cAJJ,E,eExBG,MAAMP,EAAUZ,IACrB,MAAM,IACJC,EADI,SAEJM,EAFI,eAGJS,EAHI,YAIJG,GACEE,EAAUrB,GAEd,OACE,UAAC,KAAD,CACEsB,GAAG,eACHC,QAAQ,SACRC,QAASjB,EACTkB,QAASlB,QAAkBmB,EAC3BC,UAAQ,EACRC,oBAAqBZ,EANvB,WAQE,SAAC,KAAD,CAAeM,GAAG,MAAMO,KAAK,YAAa9B,KAAK,OAAO+B,KAAK,qBAAqBC,QAASZ,KACzF,SAAC,KAAD,CAAgBa,MAAM,WAAWC,iBAAiB,MAAMC,cAAY,EAApE,uBACA,gBAAKjC,IAAKA,MAXd,EAeF,EAAekC,EAAAA,KAAWvB,E","sources":["components/Panels/Legend/utils/tips.ts","components/Panels/Legend/utils/useLegend.ts","components/Panels/Legend/utils/legend.ts","components/Panels/Legend/Legend.tsx"],"sourcesContent":["export const tips = {title: 'Legend Tips', tips: [\n    {\n        title: 'New Legend Widget',\n        text: 'In the previous version of iMAPS, the legend was only avaiable in the layer list.  New to this version is a dedicated legend widget that will show the symbols for all visible layers.',\n      },\n]}","import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { PanelProps } from \"../../utils/PanelProps\";\nimport { initializeLegend } from \"./legend\";\nimport { tips } from \"./tips\";\n\nconst useLegend = (props: PanelProps) => {\nconst ref = useRef() as any;\n  const loaded = useRef(false);\n  const [legend, setLegend] = useState<__esri.Legend>();\n  const [isActive, setIsActive] = useState(false);\n\n  useEffect(() => {\n    if (!loaded.current) {\n      loaded.current = true;\n      setLegend(initializeLegend(ref.current, props.view));\n    }\n    return () => {\n      legend && legend?.destroy();\n    };\n  }, []);\n  useEffect(() => {\n    setIsActive(props.isActive);\n  }, [props.isActive]);\n  const panelDismissed = useCallback((e: any) => {\n    props.panelDismissed();\n  }, []);\n    const tipsClicked = useCallback((e: any) => {\n        props.showTips(tips);\n        }, []);    \n    return {\n        ref,\n        isActive,\n        panelDismissed,\n        tipsClicked          \n        }        \n}\nexport default useLegend;","import MapView from \"@arcgis/core/views/MapView\";\nimport Legend from \"@arcgis/core/widgets/Legend\";\nexport function initializeLegend(ref: HTMLDivElement, view: MapView) {\n  const legend = new Legend({\n    view: view,\n    container: ref,\n  });\n  return legend;\n}\n","import React, { } from \"react\";\n\nimport { CalciteAction, CalcitePanel, CalciteTooltip } from \"@esri/calcite-components-react\";\nimport useLegend from \"./utils/useLegend\";\nimport { PanelProps } from \"../utils/PanelProps\";\nexport const Legend = (props: PanelProps) => {\n  const { \n    ref,\n    isActive,\n    panelDismissed,\n    tipsClicked    \n  } = useLegend(props);\n\n  return (\n    <CalcitePanel\n      id=\"layers-panel\"\n      heading=\"Legend\"\n      hidden={!isActive}\n      closed={!isActive ? true : undefined}\n      closable\n      onCalcitePanelClose={panelDismissed}\n    >\n      <CalciteAction id=\"tip\" icon=\"lightbulb\"  text=\"Tips\" slot=\"header-actions-end\" onClick={tipsClicked}></CalciteAction>\n      <CalciteTooltip label=\"Show Tip\" referenceElement=\"tip\" closeOnClick>Show Tip</CalciteTooltip>\n      <div ref={ref}></div>\n    </CalcitePanel>\n  );\n};\nexport default React.memo(Legend);\n"],"names":["tips","title","text","props","ref","useRef","loaded","legend","setLegend","useState","isActive","setIsActive","useEffect","current","view","Legend","container","initializeLegend","destroy","panelDismissed","useCallback","e","tipsClicked","showTips","useLegend","id","heading","hidden","closed","undefined","closable","onCalcitePanelClose","icon","slot","onClick","label","referenceElement","closeOnClick","React"],"sourceRoot":""}