"use strict";(globalThis.webpackChunkimaps_app=globalThis.webpackChunkimaps_app||[]).push([[9583],{19583:(e,t,r)=>{r.r(t),r.d(t,{default:()=>F});var i=r(27366),s=r(76200),a=r(62044),o=r(10064),n=r(41691),l=r(93002),p=r(92026),h=r(97642),u=r(66978),y=r(49861),c=(r(63780),r(93169),r(25243)),d=r(38511),m=r(69912),g=r(31201),b=r(25265),v=r(53866),f=r(82582),x=r(30651),S=r(27961),_=r(6741),w=r(11936),C=r(6693),I=r(46671),O=r(6061),M=r(29598),E=r(71684),T=r(56811),R=r(18870),L=r(99063),N=r(45948),P=r(44041),j=r(77990),k=r(58132),J=r(26704);let q=class extends((0,C.h)((0,L.n)((0,T.M)((0,R.x)((0,_.O)((0,w.Y)((0,O.q)((0,M.I)((0,h.R)((0,E.Q)((0,S.V)((0,I.N)((0,n.p)(x.Z)))))))))))))){constructor(){super(...arguments),this.datesInUnknownTimezone=!1,this.dpi=96,this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=(0,p.pC)(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(u.r9).then((()=>this._fetchService(t)))),Promise.resolve(this)}readImageFormat(e,t){const r=t.supportedImageFormatTypes;return r&&r.includes("PNG32")?"png32":"png24"}writeSublayers(e,t,r,i){if(!this.loaded||!e)return;const s=e.slice().reverse().flatten((e=>{let{sublayers:t}=e;return t&&t.toArray().reverse()})).toArray();let a=!1;if(this.capabilities&&this.capabilities.operations.supportsExportMap&&this.capabilities.exportMap.supportsDynamicLayers){const e=(0,b.M9)(i.origin);if(e===b.s3.PORTAL_ITEM){const e=this.createSublayersForOrigin("service").sublayers;a=(0,k.QV)(s,e,b.s3.SERVICE)}else if(e>b.s3.PORTAL_ITEM){const e=this.createSublayersForOrigin("portal-item");a=(0,k.QV)(s,e.sublayers,(0,b.M9)(e.origin))}}const o=[],n={writeSublayerStructure:a,...i};let l=a;s.forEach((e=>{const t=e.write({},n);o.push(t),l=l||"user"===e.originOf("visible")})),o.some((e=>Object.keys(e).length>1))&&(t.layers=o),l&&(t.visibleLayers=s.filter((e=>e.visible)).map((e=>e.id)))}createExportImageParameters(e,t,r,i){const s=i&&i.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian());const a=new P.R({layer:this,floors:i?.floors,scale:(0,f.yZ)({extent:e,width:t})*s}),o=a.toJSON();a.destroy();const n=!i||!i.rotation||this.version<10.3?{}:{rotation:-i.rotation},l=e&&e.spatialReference,p=l.wkid||JSON.stringify(l.toJSON());o.dpi*=s;const h={};if(i?.timeExtent){const{start:e,end:t}=i.timeExtent.toJSON();h.time=e&&t&&e===t?""+e:`${null==e?"null":e},${null==t?"null":t}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(h.time="null,null");return{bbox:e&&e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:p,imageSR:p,size:t+","+r,...o,...n,...h}}async fetchImage(e,t,r,i){const a={responseType:"image",signal:i?.signal??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(e,t,r,i),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},n=this.parsedUrl.path+"/export";if(null!=a.query.dynamicLayers&&!this.capabilities.exportMap.supportsDynamicLayers)throw new o.Z("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:a.query});return(0,s.default)(n,a).then((e=>e.data)).catch((e=>{if((0,u.D_)(e))throw e;throw new o.Z("mapimagelayer:image-fetch-error",`Unable to load image: ${n}`,{error:e})}))}async fetchRecomputedExtents(){const e={...arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:t}=await(0,s.default)(this.url,e),{extent:r,fullExtent:i,timeExtent:o}=t,n=r||i;return{fullExtent:n&&v.Z.fromJSON(n),timeExtent:o&&a.Z.fromJSON({start:o[0],end:o[1]})}}loadAll(){return(0,l.G)(this,(e=>{e(this.allSublayers)}))}serviceSupportsSpatialReference(e){return(0,J.D)(this,e)}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:t,ssl:r}=await(0,s.default)(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});r&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=t,this.read(t,{origin:"service",url:this.parsedUrl})}};(0,i._)([(0,y.Cb)({type:Boolean})],q.prototype,"datesInUnknownTimezone",void 0),(0,i._)([(0,y.Cb)()],q.prototype,"dpi",void 0),(0,i._)([(0,y.Cb)()],q.prototype,"gdbVersion",void 0),(0,i._)([(0,y.Cb)()],q.prototype,"imageFormat",void 0),(0,i._)([(0,d.r)("imageFormat",["supportedImageFormatTypes"])],q.prototype,"readImageFormat",null),(0,i._)([(0,y.Cb)({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],q.prototype,"imageMaxHeight",void 0),(0,i._)([(0,y.Cb)({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],q.prototype,"imageMaxWidth",void 0),(0,i._)([(0,y.Cb)()],q.prototype,"imageTransparency",void 0),(0,i._)([(0,y.Cb)({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],q.prototype,"isReference",void 0),(0,i._)([(0,y.Cb)({json:{read:!1,write:!1}})],q.prototype,"labelsVisible",void 0),(0,i._)([(0,y.Cb)({type:["ArcGISMapServiceLayer"]})],q.prototype,"operationalLayerType",void 0),(0,i._)([(0,y.Cb)({json:{read:!1,write:!1}})],q.prototype,"popupEnabled",void 0),(0,i._)([(0,y.Cb)()],q.prototype,"sourceJSON",void 0),(0,i._)([(0,y.Cb)({json:{write:{ignoreOrigin:!0}}})],q.prototype,"sublayers",void 0),(0,i._)([(0,g.c)("sublayers",{layers:{type:[j.Z]},visibleLayers:{type:[c.z8]}})],q.prototype,"writeSublayers",null),(0,i._)([(0,y.Cb)({type:["show","hide","hide-children"]})],q.prototype,"listMode",void 0),(0,i._)([(0,y.Cb)({json:{read:!1},readOnly:!0,value:"map-image"})],q.prototype,"type",void 0),(0,i._)([(0,y.Cb)(N.HQ)],q.prototype,"url",void 0),q=(0,i._)([(0,m.j)("esri.layers.MapImageLayer")],q);const F=q}}]);
//# sourceMappingURL=9583.badcae59.chunk.js.map