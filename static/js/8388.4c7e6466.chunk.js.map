{"version":3,"file":"static/js/8388.4c7e6466.chunk.js","mappings":"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","sources":["components/Panels/Basemaps/Blend/utils/blend.ts","components/Panels/Basemaps/Blend/Blend.tsx","components/Panels/Basemaps/utils/basemaps.ts","components/Panels/Basemaps/Basemaps.tsx"],"sourcesContent":["import Basemap from \"@arcgis/core/Basemap\";\nimport MapView from \"@arcgis/core/views/MapView\";\nimport WebMap from \"@arcgis/core/WebMap\";\n\nexport function addBasemap(\n  nextStep: string,\n  evt: any,\n  items: any[],\n  basemap: Basemap,\n  index: number,\n  setActiveStep: Function,\n  view: MapView\n) {\n  if (index === 0) {\n    //basemap = new Basemap({ baseLayers: []})\n    view.map.basemap.baseLayers.removeAll();\n  }\n\n  const id = evt?.detail?.selectedItems[0]?.value;\n  if (id) {\n    const item = items.find((item) => {\n      return item.id === id;\n    }) as __esri.PortalItem;\n    item?.load().then((item: __esri.PortalItem) => {\n      if (item.type === \"Web Map\") {\n        const webmap = new WebMap({ portalItem: { id: item.id } });\n        webmap.loadAll().then((m: WebMap) => {\n          setTimeout(() => {\n            m?.basemap.baseLayers.forEach((layer: __esri.Layer) => {\n              if (index === 0) {\n                (layer as any).blendMode = \"multiply\";\n              }\n              basemap.baseLayers.add(layer, 0);\n            });\n\n            basemap.baseLayers.addMany(basemap.baseLayers, 0);\n            setActiveStep(nextStep);\n            if (nextStep === \"opacity\") {\n              //view.map.basemap.baseLayers.removeAll();\n              // view.map.basemap.baseLayers.addMany(basemap.baseLayers);\n\n              view.map.basemap = basemap;\n            }\n          });\n        });\n      }\n    });\n  }\n}\n","import \"@esri/calcite-components/dist/components/calcite-stepper\";\nimport \"@esri/calcite-components/dist/components/calcite-stepper-item\";\nimport \"@esri/calcite-components/dist/components/calcite-combobox\";\nimport \"@esri/calcite-components/dist/components/calcite-combobox-item\";\nimport \"@esri/calcite-components/dist/components/calcite-slider\";\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport MapView from \"@arcgis/core/views/MapView\";\nimport Portal from \"@arcgis/core/portal/Portal\";\nimport PortalGroup from \"@arcgis/core/portal/PortalGroup\";\nimport PortalItem from \"@arcgis/core/portal/PortalItem\";\n\nimport Basemap from \"@arcgis/core/Basemap\";\n\nimport {\n  CalciteCombobox,\n  CalciteComboboxItem,\n  CalciteSlider,\n  CalciteStepper,\n  CalciteStepperItem,\n} from \"@esri/calcite-components-react\";\nimport { addBasemap } from \"./utils/blend\";\nimport \"./Blend.css\";\n\nfunction Blend(args: any) {\n  const [view, setView] = useState<MapView>();\n  const loaded = useRef(false);\n  const [activeStep, setActiveStep] = useState(\"basemap\");\n  const [maps, setMaps] = useState<PortalItem[]>([]);\n  const [images, setImages] = useState<PortalItem[]>([]);\n  const basemap = useRef<Basemap>(new Basemap({ baseLayers: [] }));\n  useEffect(() => {\n    setView(args.view);\n    if (!loaded.current) {\n      const portal = new Portal();\n      portal\n        .queryGroups({\n          query: `id: ${args.mapGroup}`,\n        })\n        .then((result) => {\n          const group: PortalGroup = result.results[0] as PortalGroup;\n          group\n            .queryItems({\n              query: \"*\",\n            })\n            .then((result) => {\n              setMaps(result.results);\n            });\n        });\n      portal\n        .queryGroups({\n          query: `id: ${args.imageGroup}`,\n        })\n        .then((result) => {\n          const group: PortalGroup = result.results[0] as PortalGroup;\n          group\n            .queryItems({\n              query: \"*\",\n            })\n            .then((result) => {\n              setImages(result.results);\n            });\n        });\n    }\n  }, [args.view, args.mapGroup, args.imageGroup]);\n\n  return (\n    <div className=\"blend\">\n      <CalciteStepper layout=\"vertical\">\n        <CalciteStepperItem\n          active={activeStep === \"basemap\" ? true : undefined}\n          itemTitle=\"Basemap\"\n          description=\"Select basemap layer\"\n          onClick={() => setActiveStep(\"basemap\")}\n        >\n          <CalciteCombobox\n            label=\"Basemaps\"\n            selectionMode=\"single\"\n            onCalciteComboboxChange={(evt) =>\n              addBasemap(\n                \"images\",\n                evt,\n                maps,\n                basemap.current as Basemap,\n                0,\n                setActiveStep,\n                view as __esri.MapView\n              )\n            }\n          >\n            {maps.map((item: PortalItem) => {\n              return (\n                <CalciteComboboxItem\n                  key={item.id}\n                  title={item.title}\n                  textLabel={item.title}\n                  value={item.id}\n                ></CalciteComboboxItem>\n              );\n            })}\n          </CalciteCombobox>\n        </CalciteStepperItem>\n        <CalciteStepperItem\n          active={activeStep === \"images\" ? true : undefined}\n          itemTitle=\"Image\"\n          description=\"Select imagery layer\"\n          onClick={() => setActiveStep(\"images\")}\n        >\n          <CalciteCombobox\n            label=\"Images\"\n            selectionMode=\"single\"\n            onCalciteComboboxChange={(evt) =>\n              addBasemap(\n                \"opacity\",\n                evt,\n                images,\n                basemap.current as Basemap,\n                1,\n                setActiveStep,\n                view as __esri.MapView\n              )\n            }\n          >\n            {images\n              .sort((a, b) => {\n                return a.title > b.title ? -1 : 1;\n              })\n              .map((item: PortalItem) => {\n                return (\n                  <CalciteComboboxItem\n                    key={item.id}\n                    title={item.title}\n                    textLabel={item.title}\n                    value={item.id}\n                  ></CalciteComboboxItem>\n                );\n              })}\n          </CalciteCombobox>\n        </CalciteStepperItem>\n        <CalciteStepperItem\n          active={activeStep === \"opacity\" ? true : undefined}\n          itemTitle=\"Opacity\"\n          description=\"Set opacity\"\n          onClick={() => setActiveStep(\"opacity\")}\n        >\n          <CalciteSlider\n            max={1}\n            min={0}\n            step={0.1}\n            value={\n              basemap.current?.baseLayers?.getItemAt(\n                basemap.current.baseLayers.length - 1\n              )?.opacity\n            }\n            maxLabel=\"Opaque\"\n            minLabel=\"Transparent\"\n            onCalciteSliderInput={(evt) => {\n              if (view) {\n                view.map.basemap.baseLayers.getItemAt(0).opacity = evt.target\n                  .value as number;\n              }\n            }}\n          ></CalciteSlider>\n        </CalciteStepperItem>\n      </CalciteStepper>\n    </div>\n  );\n}\n\nexport default Blend;\n","import * as geometryEngine from \"@arcgis/core/geometry/geometryEngine\";\nimport BasemapGallery from \"@arcgis/core/widgets/BasemapGallery\";\nimport MapView from \"@arcgis/core/views/MapView\";\nimport PortalBasemapsSource from \"@arcgis/core/widgets/BasemapGallery/support/PortalBasemapsSource\";\nimport request from \"@arcgis/core/request\";\nimport Polygon from \"@arcgis/core/geometry/Polygon\";\nimport Basemap from \"@arcgis/core/Basemap\";\nimport Color from \"@arcgis/core/Color\";\nimport * as reactiveUtils from \"@arcgis/core/core/reactiveUtils\";\nimport FeatureLayer from \"@arcgis/core/layers/FeatureLayer\";\n\nexport function initializeBasemaps(\n  view: MapView,\n  ref: HTMLDivElement,\n  id: string\n) {\n  new BasemapGallery({\n    container: ref,\n    view: view,\n    source: {\n      query: `id: ${id}`,\n    },\n  });\n}\n\nlet images: BasemapGallery;\nexport function initializeImageMaps(\n  view: MapView,\n  ref: HTMLDivElement,\n  id: string,\n  setShowAlert: Function\n) {\n  images = new BasemapGallery({\n    container: ref,\n    view: view,\n    source: new PortalBasemapsSource({\n      query: `id: ${id}`,\n      filterFunction: filterBasemaps,\n      updateBasemapsCallback: (items: Basemap[]) => {\n        return items.reverse();\n      },\n    }),\n  });\n  images.when(() => {\n    images.source.basemaps.reverse();\n    if (!imageryBoundary) {\n      getBoundary(view).then((boundary: Polygon) => {\n        imageryBoundary = boundary;\n        inRaleigh = checkBoundary(view.extent);\n        images.source.refresh();\n      });\n    }\n    view.watch(\"extent\", (extent: __esri.Extent) => viewExtentChanged(extent, view, setShowAlert));\n  });\n  view.map.watch('basemap', (basemap: Basemap) => {\n    checkBasemapTheme(basemap, view).then((isLight: boolean) => {\n      setPropertyColor(view, isLight);\n    });\n  });\n}\n\nexport function initializeEsriMaps(view: MapView, ref: HTMLDivElement) {\n  new BasemapGallery({\n    container: ref,\n    view: view,\n  });\n}\n\nlet imageryBoundary: Polygon;\nlet inRaleigh: Boolean;\nlet wasRaleigh: Boolean;\nconst checkBoundary = (extent: __esri.Extent): Boolean => {\n  return geometryEngine.intersects(extent, imageryBoundary);\n};\n\nexport const filterBasemaps = (item: __esri.Basemap): boolean => {\n  if (inRaleigh) {\n    return true;\n  } else {\n    return item.portalItem.tags.includes(\"countywide\");\n  }\n};\n\nconst getBoundary = (view: __esri.MapView): Promise<Polygon> => {\n  return new Promise((resolve, reject) => {\n    request(\n      \"https://maps.raleighnc.gov/images/rest/services/Orthos2020/ImageServer/queryBoundary?outSR=102100&f=json\",\n      { responseType: \"json\" }\n    ).then((response) => {\n      imageryBoundary = Polygon.fromJSON(response.data.shape);\n      resolve(imageryBoundary);\n    });\n  });\n};\n\n\nconst viewExtentChanged = (extent: __esri.Extent, view: MapView,  setShowAlert: Function) => {\n  if (\n    imageryBoundary &&\n    images.source.basemaps.find(\n      (basemap) => images.activeBasemap.title === basemap.title\n    )\n  ) {\n    wasRaleigh = inRaleigh;\n    inRaleigh = checkBoundary(view.extent);\n    if (wasRaleigh !== inRaleigh) {\n      images.source.refresh();\n      setTimeout(() => {\n        const match = images.source.basemaps.find(\n          (basemap) => view.map.basemap.title === basemap.title\n        );\n        if (!match) {\n          const from = images.activeBasemap.title;\n          images.activeBasemap = images.source.basemaps.at(0);\n          const to = images.activeBasemap.title;\n          setShowAlert({ show: true, from: from, to: to });\n        } else {\n          images.activeBasemap = match;\n        }\n      }, 1000);\n    }\n  }\n}\n\n\nconst checkBasemapTheme = (basemap: Basemap, view: MapView): Promise<boolean> => {\n   return new Promise((resolve, reject) => {\n    if (basemap.baseLayers.length) {\n      const baseLayer = basemap.baseLayers.find(layer => {return layer.type === 'vector-tile'});\n      if (baseLayer?.type === 'vector-tile') {\n        reactiveUtils.whenOnce(() => baseLayer.loaded).then(loaded => {\n          const background = (baseLayer as __esri.VectorTileLayer).getStyleLayer('background');\n          if (background) {\n            const color: Color = new Color(background.paint[\"background-color\"]);\n            view.background = {color: color} as __esri.ColorBackground;\n            resolve((color as any).isBright);\n          } else {\n            resolve(true);\n          }\n        });\n  \n      } else if (!baseLayer && basemap.baseLayers.getItemAt(0).type === 'imagery') {\n        resolve(false);\n      } else {\n        resolve(true);\n      }\n    }\n   });\n}\n\nconst setPropertyColor = (view: MapView,isLight: boolean) => {\n  const layer = view.map.allLayers.find(layer => {return layer.title.includes('Property') && layer.type === 'feature'});\n  if (layer) {\n    const renderer = ((layer as FeatureLayer)?.renderer as __esri.SimpleRenderer).clone();\n    if (isLight) {\n      (renderer.symbol as __esri.SimpleFillSymbol).outline.color.r = 0;\n      (renderer.symbol as __esri.SimpleFillSymbol).outline.color.g = 0;\n      (renderer.symbol as __esri.SimpleFillSymbol).outline.color.b = 0;\n    }\n    else {\n      (renderer.symbol as __esri.SimpleFillSymbol).outline.color.r = 255;\n      (renderer.symbol as __esri.SimpleFillSymbol).outline.color.g = 255;\n      (renderer.symbol as __esri.SimpleFillSymbol).outline.color.b = 255;\n    }\n    (layer as FeatureLayer).renderer = renderer;\n  }\n}","import \"@esri/calcite-components/dist/components/calcite-tab\";\nimport \"@esri/calcite-components/dist/components/calcite-tabs\";\nimport \"@esri/calcite-components/dist/components/calcite-tab-nav\";\nimport \"@esri/calcite-components/dist/components/calcite-tab-title\";\nimport \"@esri/calcite-components/dist/components/calcite-alert\";\n\nimport {\n  CalciteAlert,\n  CalciteTab,\n  CalciteTabNav,\n  CalciteTabs,\n  CalciteTabTitle,\n} from \"@esri/calcite-components-react\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport MapView from \"@arcgis/core/views/MapView\";\nimport Blend from \"./Blend/Blend\";\nimport {\n  initializeBasemaps,\n  initializeEsriMaps,\n  initializeImageMaps,\n} from \"./utils/basemaps\";\nimport \"./Basemaps.css\";\nfunction Basemaps(args: any) {\n  const [view, setView] = useState<MapView>();\n  const [showAlert, setShowAlert] = useState<any>({\n    show: false,\n    from: \"\",\n    to: \"\",\n  });\n\n  const loaded = useRef(false);\n  const basemapRef = useRef(null);\n  const imagesRef = useRef(null);\n  const esriRef = useRef(null);\n  const mapGroup = \"f6329364e80c438a958ce74aadc3a89f\";\n  const imageGroup = \"492386759d264d49948bf7f83957ddb9\";\n  useEffect(() => {\n    setView(args.view);\n    if (!loaded.current) {\n      loaded.current = true;\n      initializeBasemaps(args.view, basemapRef.current as any, mapGroup);\n      initializeImageMaps(\n        args.view,\n        imagesRef.current as any,\n        imageGroup,\n        setShowAlert\n      );\n      initializeEsriMaps(args.view, esriRef.current as any);\n    }\n  }, [args.view]);\n\n  return (\n    <div className=\"basemaps\">\n      <CalciteTabs position=\"below\" layout=\"center\" scale=\"m\">\n        <CalciteTabNav\n          slot=\"tab-nav\"\n        >\n          <CalciteTabTitle>Maps</CalciteTabTitle>\n          <CalciteTabTitle>Images</CalciteTabTitle>\n          <CalciteTabTitle>Esri</CalciteTabTitle>\n          <CalciteTabTitle>Blend</CalciteTabTitle>\n        </CalciteTabNav>\n        <CalciteTab>\n          <div ref={basemapRef}></div>\n        </CalciteTab>\n        <CalciteTab>\n          <div ref={imagesRef}></div>\n        </CalciteTab>\n        <CalciteTab>\n          <div ref={esriRef}></div>\n        </CalciteTab>\n        <CalciteTab>\n          <Blend\n            view={view}\n            mapGroup={mapGroup}\n            imageGroup={imageGroup}\n          ></Blend>\n        </CalciteTab>\n      </CalciteTabs>\n      <CalciteAlert\n        active={showAlert.show === true ? true : undefined}\n        autoDismiss\n        autoDismissDuration=\"medium\"\n        color=\"yellow\"\n        label=\"Imagery Year Changed\"\n      >\n        <div slot=\"title\">Imagery Not Available</div>\n        <div slot=\"message\">{`Imagery for ${showAlert.from} only available inside Raleigh, base map has changed to ${showAlert.to}`}</div>\n      </CalciteAlert>\n    </div>\n  );\n}\n\nexport default React.memo(Basemaps);\n"],"names":["addBasemap","nextStep","evt","items","basemap","index","setActiveStep","view","map","baseLayers","removeAll","id","detail","selectedItems","value","item","find","load","then","type","WebMap","portalItem","loadAll","m","setTimeout","forEach","layer","blendMode","add","addMany","args","setView","useState","loaded","useRef","activeStep","maps","setMaps","images","setImages","Basemap","useEffect","current","portal","Portal","queryGroups","query","mapGroup","result","results","queryItems","imageGroup","className","layout","active","undefined","itemTitle","description","onClick","label","selectionMode","onCalciteComboboxChange","title","textLabel","sort","a","b","max","min","step","getItemAt","length","opacity","maxLabel","minLabel","onCalciteSliderInput","target","imageryBoundary","inRaleigh","wasRaleigh","checkBoundary","extent","geometryEngine","intersects","filterBasemaps","tags","includes","getBoundary","Promise","resolve","reject","request","responseType","response","Polygon","data","shape","viewExtentChanged","setShowAlert","source","basemaps","activeBasemap","refresh","match","from","at","to","show","checkBasemapTheme","baseLayer","reactiveUtils","background","getStyleLayer","color","Color","paint","isBright","setPropertyColor","isLight","allLayers","renderer","clone","symbol","outline","r","g","Basemaps","showAlert","basemapRef","imagesRef","esriRef","ref","BasemapGallery","container","initializeBasemaps","PortalBasemapsSource","filterFunction","updateBasemapsCallback","reverse","when","boundary","watch","initializeImageMaps","initializeEsriMaps","position","scale","slot","autoDismiss","autoDismissDuration","React"],"sourceRoot":""}