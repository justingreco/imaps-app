{"version":3,"file":"static/js/822.806cb49d.chunk.js","mappings":"qPASA,IAAIA,EACAC,EACAC,EACAC,EACAC,EA+BAC,EACAC,EAEAC,EAEAC,EAnCAC,EAAuB,GACvBC,EAAa,IAAIC,EAAAA,EAAiB,CACpCC,MAAO,CAAC,IAAK,EAAG,EAAG,IACnBC,MAAO,QACPC,QAAS,CACPC,MAAO,EACPH,MAAO,CAAC,IAAK,EAAG,EAAG,MAGnBI,EAAa,IAAIC,EAAAA,EAAiB,CACpCF,MAAO,EACPH,MAAO,CAAC,IAAK,EAAG,EAAG,GACnBC,MAAO,QACPK,IAAK,QACLC,KAAM,UAEJC,EAAa,IAAIC,EAAAA,EAAW,CAC9BT,MAAO,CAAC,IAAK,EAAG,EAAG,GACnBU,UAAW,CAAC,IAAK,IAAK,IAAK,GAC3BC,SAAU,MACVC,KAAM,GACNC,QAAS,EACTC,QAAS,EACTC,KAAM,CAEJC,KAAM,GACNC,OAAQ,SACRC,OAAQ,UAgCZ,SAASC,EACPC,EACAC,EACAC,GAEA,MAAMC,EAAW,IAAIC,EAAAA,EAAgB,CACnCH,OACAD,QACAK,sBAAsB,IAMxB,OAJAF,EAASG,GAAG,SAAUC,GAIfJ,CACR,CAED,SAASI,EAAWC,GACF,aAAZA,EAAEC,QAC4B,YAA5BD,EAAEE,QAAQC,SAASC,OACrBJ,EAAEE,QAAQG,OAASnC,EACnBN,EAAYF,aAAa4C,IAAIN,EAAEE,SAC/BK,YAAW,IAAMxC,EAAuByC,eAAeF,IAAIN,EAAEE,WAE7DnC,EAAuB0C,OAAOT,EAAEU,OAEF,aAA5BV,EAAEE,QAAQC,SAASC,OACrBJ,EAAEE,QAAQG,OAAS7B,EACnBZ,EAAYH,cAAc6C,IAAIN,EAAEE,SAChCpC,EAAwB2C,OAAOT,EAAEU,OAEd,SAAjBzC,IACF+B,EAAEE,QAAQG,OAASzB,EACnBhB,EAAYD,UAAU2C,IAAIN,EAAEE,SAC5BlC,EAAoByC,OAAO,UAGhC,CAEM,SAASE,EACdD,EACAE,EACAC,GAEA5C,EAAeyC,EACOG,EAAtBH,IAASE,EAA2B,GAAoBF,GACrC,KAAfE,GACFE,IAEE,CAAC,UAAW,YAAa,UAAUC,SAASL,IAC9C3C,EAAuB0C,OAAOC,GAE5B,CAAC,YAAYK,SAASL,IACxB5C,EAAwB2C,OAAOC,GAEpB,SAATA,GACF5C,EAAwB2C,OAAO,QAElC,CAEM,SAASO,EACdC,EACAC,EACA3C,GAEAL,EAAWE,MAAQ6C,EACnB/C,EAAWI,QAAQF,MAAQ8C,EAC3BhD,EAAWI,QAAQC,MAAQA,EAC3BR,EAAuBoD,iBAAmBjD,EAC1CH,EAAuByC,eAAeY,SAASlB,IAC7CA,EAAQG,OAASnC,CAAjB,GAEH,CAEM,SAASmD,EAAsBC,EAAkB/C,GACtDC,EAAWJ,MAAQkD,EACnB9C,EAAWD,MAAQA,EACnBT,EAAwBqD,iBAAmB3C,EAC3CV,EAAwB0C,eAAeY,SAASlB,IAC9CA,EAAQG,OAAS7B,CAAjB,GAEH,CAEM,SAAS+C,EACdC,EACAC,EACA1C,EACAD,EACA4C,EACAC,GAEA/C,EAAWR,MAAQqD,EACnB7C,EAAWO,KAAKC,KAAOoC,EACvB5C,EAAWE,UAAYA,EACvBF,EAAWG,SAAW2C,EAAW3C,EAAW,EAC5CH,EAAWI,KAAO2C,EAClB3D,EAAoB4D,YAAchD,CACnC,CAED,SAASkC,IACPjD,EAAqBgE,SACrB/D,EAAwB+D,SACxB9D,EAAuB8D,SACvB7D,EAAoB6D,QACrB,C,uFCrDD,QAvGA,SAAqBC,GACnB,MAAMC,GAAUC,EAAAA,EAAAA,QAAkC,MAC5CC,GAASD,EAAAA,EAAAA,QAAsC,OAC9C5D,EAAO8D,IAAYC,EAAAA,EAAAA,aACnBC,EAAcC,IAAmBF,EAAAA,EAAAA,UAAc,GAQtD,OAPAG,EAAAA,EAAAA,YAAU,KACJR,EAAK1D,QACP8D,EAASJ,EAAK1D,OACdiE,EAAsC,KAArB,EAAIP,EAAK1D,MAAM,KACjC,GACA,KAGD,4BACE,UAAC,KAAD,WACG0D,EAAKS,MADR,UAEE,SAAC,KAAD,CACEC,GAAK,GAAEV,EAAKU,oBACZjE,MAAM,OACNkE,QAAQ,SACRrE,MAAM,UACNsE,WAAW,UALb,UAOE,SAAC,KAAD,CAA0BtE,MAAOA,UAGrC,UAAC,KAAD,CACEuE,IAAKZ,EACLa,mBAAmB,QACnBC,UAAU,cACVN,MAAO,GACPO,iBAAmB,GAAEhB,EAAKU,oBAL5B,WAOE,SAAC,KAAD,CACEG,IAAKV,EACLc,WAAS,EACTC,SAAO,EACPC,cAAY,EACZC,0BAA4BlD,GAAMkC,EAASlC,EAAEmD,OAAOC,UAEtD,SAAC,KAAD,CACE7E,MAAM,OACN8E,QAAS,KAAO,IAAD,EACb,UAAAtB,EAAQuB,eAAR,SAAiBC,SACjB,MAAMC,EAAI,IAAIC,EAAAA,EAAMrF,GACpBoF,EAAEE,EAAI,EAAItB,EAAe,IACzBN,EAAK6B,SAASH,EAAd,EANJ,sBAYA1B,EAAK8B,mBACL,UAAC,KAAD,WACG9B,EAAKS,MADR,iBAEE,iBAAKsB,UAAU,eAAf,WACE,SAAC,KAAD,CACEC,IAAK,IACLC,IAAK,EACLX,MAAOhB,EACP4B,qBAAuBhE,IACrB,IAAIoD,EAAgBpD,EAAEmD,OAAOC,MACzBA,EAAQ,MACVA,EAAQ,KAENA,EAAQ,IACVA,EAAQ,GAEVf,EAAgBe,GAChB,MAAMI,EAAI,IAAIC,EAAAA,EAAMrF,GACpBoF,EAAEE,EAAI,EAAItB,EAAe,IACzBN,EAAK6B,SAASH,EAAd,KAGJ,SAAC,IAAD,CACEM,IAAK,IACLC,IAAK,EACL3D,KAAK,SACL6D,iBAAiB,OACjBC,WAAW,IACXd,MAAOhB,EACP+B,oBAAsBnE,IACpB,IAAIoD,EAAgBgB,SAASpE,EAAEmD,OAAOC,OAClCA,EAAQ,MACVA,EAAQ,KAENA,EAAQ,IACVA,EAAQ,GAGVf,EAAgBe,GAChB,MAAMI,EAAI,IAAIC,EAAAA,EAAMrF,GACpBoF,EAAEE,EAAI,EAAItB,EAAe,IACzBN,EAAK6B,SAASH,EAAd,YAQf,EC9ED,QAlCA,SAAoB1B,GAClB,MAAOsB,EAAOiB,IAAYlC,EAAAA,EAAAA,YAI1B,OAHAG,EAAAA,EAAAA,YAAU,KACR+B,EAASvC,EAAKsB,MAAd,GACC,CAACtB,EAAKsB,SAEP,UAAC,KAAD,WACGtB,EAAKS,OACN,iBAAKsB,UAAU,eAAf,WACE,SAAC,KAAD,CACEC,IAAKhC,EAAKgC,IACVC,IAAKjC,EAAKiC,IACVX,MAAOA,EACPY,qBAAuBhE,IACrBqE,EAASrE,EAAEmD,OAAOC,OAClBtB,EAAKwC,QAAQtE,EAAEmD,OAAOC,MAAtB,KAGJ,SAAC,IAAD,CACEhD,KAAK,SACL6D,iBAAiB,OACjBF,IAAKjC,EAAKiC,IACVD,IAAKhC,EAAKgC,IACVV,MAAOA,EACPc,WAAW,KACXC,oBAAsBnE,IACpBqE,EAASE,WAAWvE,EAAEmD,OAAOC,QAC7BtB,EAAKwC,QAAQC,WAAWvE,EAAEmD,OAAOC,OAAjC,SAMX,ECsBD,QAnDA,SAAqBtB,GACnB,MAAOR,EAAWkD,IAAgBrC,EAAAA,EAAAA,UAAgB,IAAIsB,EAAAA,EAAM,CAAC,IAAK,EAAG,EAAG,MACjElF,EAAOkG,IAAYtC,EAAAA,EAAAA,UAAS,GAEnC,OACE,iBAAKK,GAAG,eAAR,WACE,iBACEkC,MAAM,6BACNnG,MAAM,KACNoG,OAAQpG,EAAMqG,WAHhB,WAKE,qBACA,cAAGC,UAAU,sBAAb,UACE,iBACEC,KAAK,OACLC,SAAS,UACTC,OAAM,OAAE1D,QAAF,IAAEA,OAAF,EAAEA,EAAWsD,WACnBK,YAAa1G,EACb2G,cAAc,QACdC,eAAe,QACfC,gBAAgB,OAChBC,iBAAiB,IACjBC,EAAI,MAAK/G,EAAQ,GAAGqG,eAAerG,EAAQ,GAAGqG,sBAC5CrG,EAAQ,GACRqG,qBAIR,SAAC,EAAD,CACEpC,GAAG,OACHD,MAAM,OACNnE,MAAOkD,EAAUiE,SACjB5B,SAAWvF,IACToG,EAAapG,GACb0D,EAAKT,sBAAsBC,EAAW/C,EAAtC,KAGJ,SAAC,EAAD,CACE6E,MAAO7E,EACPwF,IAAK,GACLD,IAAK,GACLvB,MAAM,QACN+B,QAAUlF,IACRqF,EAASrF,GACT0C,EAAKT,sBAAsBC,EAAW/C,EAAtC,MAKT,ECkBD,QA5EA,SAAwBuD,GACtB,MAAOb,EAAWuE,IAAgBrD,EAAAA,EAAAA,UAChC,IAAIsB,EAAAA,EAAM,CAAC,IAAK,EAAG,EAAG,OAEjBvC,EAAcuE,IAAmBtD,EAAAA,EAAAA,UACtC,IAAIsB,EAAAA,EAAM,CAAC,IAAK,EAAG,EAAG,MAEjBlF,EAAOkG,IAAYtC,EAAAA,EAAAA,UAAS,GACnC,OACE,iBAAKK,GAAG,kBAAR,WACE,0BACE,iBACEkC,MAAM,6BACNnG,OAAQ,GAAKA,GAAOqG,WACpBD,QAAS,GAAKpG,GAAOqG,WAHvB,WAKE,qBACA,cACEC,UAAY,WACV,WACQ,WAARtG,GACAqG,mBACA,WACQ,WAARrG,GACAqG,eAAuB,GAARrG,EAAc,IAAIqG,eACzB,GAARrG,EACA,IACAqG,cAVJ,UAYE,iBACEc,aAAa,qBACbZ,KAAI,OAAE7D,QAAF,IAAEA,OAAF,EAAEA,EAAW2D,WACjBG,SAAS,UACTC,OAAM,OAAE9D,QAAF,IAAEA,OAAF,EAAEA,EAAc0D,WACtBK,YAAa1G,EACb2G,cAAc,QACdC,eAAe,QACfC,gBAAgB,OAChBC,iBAAiB,IACjBC,EAAE,0DAKV,SAAC,EAAD,CACE9C,GAAG,eACHpE,MAAO6C,EAAUsE,SACjBhD,MAAM,OACNoB,SAAWH,IACTgC,EAAahC,GACb1B,EAAKd,qBAAqBC,EAAWC,EAAc3C,EAAnD,KAGJ,SAAC,EAAD,CACEiE,GAAG,kBACHpE,MAAO8C,EAAaqE,SACpBhD,MAAM,UACNoB,SAAWH,IACTiC,EAAgBjC,GAChB1B,EAAKd,qBAAqBC,EAAWC,EAAc3C,EAAnD,KAGJ,SAAC,EAAD,CACEgE,MAAM,gBACNwB,IAAK,GACLD,IAAK,GACLV,MAAO7E,EACP+F,QAAUlF,IACRqF,EAASrF,GACT0C,EAAKd,qBAAqBC,EAAWC,EAAc3C,EAAnD,MAKT,ECgED,QApIA,SAAqBuD,GACnB,MAAOL,EAAWkE,IAAgBxD,EAAAA,EAAAA,UAAgB,IAAIsB,EAAAA,EAAM,CAAC,IAAK,EAAG,EAAG,MACjEjC,EAAUoE,IAAezD,EAAAA,EAAAA,UAAS,KAClCT,EAAUmE,IAAe1D,EAAAA,EAAAA,WAAS,IAClCpD,EAAU+G,IAAe3D,EAAAA,EAAAA,UAAS,IAClCrD,EAAWiH,IAAgB5D,EAAAA,EAAAA,UAChC,IAAIsB,EAAAA,EAAM,CAAC,IAAK,IAAK,IAAK,MAErB9B,EAAaqE,IAAkB7D,EAAAA,EAAAA,UAAS,IAE/C,OACE,iBAAKK,GAAG,eAAR,WACE,UAAC,KAAD,mBAEE,SAAC,IAAD,CACEpC,KAAK,WACL6F,MAAM,IACN7C,MAAOzB,EACPwC,oBAAsBnE,IACpBgG,EAAehG,EAAEmD,OAAOC,MAAxB,EAEF8C,qBAAuBlG,IACrBmG,uBAAsB,KACpBrE,EAAKP,kBACHC,EACAC,EACA1C,EACAD,EACA4C,EACAC,EANF,GADF,QAaN,SAAC,EAAD,CACEa,GAAG,OACHD,MAAM,OACNnE,MAAOqD,EAAU8D,SACjB3B,kBAAgB,EAChBD,SAAWvF,IACTuH,EAAavH,GACb0D,EAAKP,kBACHC,EACAC,EACA1C,EACAD,EACA4C,EACAC,EANF,KAUJ,UAAC,KAAD,wBAEE,SAAC,IAAD,CACEvB,KAAK,SACL2D,IAAK,EACLD,IAAK,IACLV,MAAO5B,EAASoD,WAChBT,oBAAsBnE,IACpB4F,EAAYrB,WAAWvE,EAAEmD,OAAOC,QAChCtB,EAAKP,kBACHC,EACAC,EACA1C,EACAD,EACA4C,EACAC,EANF,QAWN,UAAC,KAAD,CAAcyE,OAAO,SAArB,kBAEE,SAAC,KAAD,CACEC,UAAS3E,QAAkB4E,EAC3BC,sBAAwBvG,IACtB6F,EAAY7F,EAAEmD,OAAOkD,SACrBvE,EAAKP,kBACHC,EACAC,EACA1C,EACAD,EACA4C,EACAC,EANF,QAWN,iBAAKa,GAAG,OAAOgE,QAAQ9E,QAAW4E,EAAlC,WACE,SAAC,EAAD,CACE9D,GAAG,OACHD,MAAM,GACNnE,MAAOU,EAAUyG,SACjB3B,kBAAgB,EAChBD,SAAWvF,IACT2H,EAAa3H,GACb0D,EAAKP,kBACHC,EACAC,EACA1C,EACAD,EACA4C,EACAC,EANF,KAUJ,UAAC,KAAD,mBAEE,SAAC,IAAD,CACEvB,KAAK,SACL2D,IAAK,EACLD,IAAK,GACLV,MAAOrE,EAAS6F,WAChBT,oBAAsBnE,IACpB8F,EAAYvB,WAAWvE,EAAEmD,OAAOC,QAChCtB,EAAKP,kBACHC,EACAC,EACA1C,EACAD,EACA4C,EACAC,EANF,YAcb,ECzBD,QAhGA,SAAgBG,GACd,MAAM2E,GAASzE,EAAAA,EAAAA,SAAO,IACfpB,EAAYC,IAAiBsB,EAAAA,EAAAA,UAAS,IAM7C,OALAG,EAAAA,EAAAA,YAAU,KN4BL,IAAmC7C,EM3BjCgH,EAAOnD,UN2B0B7D,EM1BVqC,EAAKrC,KN2BnC7B,EAAc,IAAI8I,EAAAA,QAAc,CAC9BC,SAAU,OACVnE,GAAI,gBAEN/C,EAAKmH,IAAItG,IAAI1C,GACbJ,EAAaI,EAAYJ,WACzBC,EAAgBG,EAAYH,cAC5BC,EAAeE,EAAYF,aAE3BC,EAAYC,EAAYD,UAGxBE,EAAuB0B,EAAuB/B,EAAYiC,GAC1D3B,EAA0ByB,EAAuB9B,EAAegC,GAChE1B,EAAyBwB,EAAuB7B,EAAc+B,GAC9D1B,EAAuBoD,iBAAmBjD,EACzCJ,EAAgC+I,iBAAmBrI,EAEpDR,EAAsBuB,EAAuB5B,EAAW8B,GM5CrD,GACA,KAED,iBAAK+C,GAAG,eAAR,WACE,UAAC,KAAD,CAAoB4D,OAAO,aAA3B,WACE,SAAC,KAAD,CACEU,OAAuB,UAAflG,QAAgC0F,EACxCS,KAAK,MACL/H,KAAM,GACNqE,QAAS,IAAM1C,EAAa,QAASC,EAAYC,MAEnD,SAAC,KAAD,CACEiG,OAAuB,aAAflG,QAAmC0F,EAC3CS,KAAK,OACL/H,KAAM,GACNqE,QAAS,IAAM1C,EAAa,WAAYC,EAAYC,MAEtD,SAAC,KAAD,CACEiG,OAAuB,YAAflG,QAAkC0F,EAC1CS,KAAK,UACL/H,KAAM,GACNqE,QAAS,IAAM1C,EAAa,UAAWC,EAAYC,MAErD,SAAC,KAAD,CACEiG,OAAuB,cAAflG,QAAoC0F,EAC5CS,KAAK,YACL/H,KAAM,GACNqE,QAAS,IAAM1C,EAAa,YAAaC,EAAYC,MAEvD,SAAC,KAAD,CACEiG,OAAuB,WAAflG,QAAiC0F,EACzCS,KAAK,SACL/H,KAAM,GACNqE,QAAS,IAAM1C,EAAa,SAAUC,EAAYC,MAEpD,SAAC,KAAD,CACEiG,OAAuB,SAAflG,QAA+B0F,EACvCS,KAAK,OACL/H,KAAM,GACNqE,QAAS,IAAM1C,EAAa,OAAQC,EAAYC,SAGpD,UAAC,KAAD,CAAoBuF,OAAO,aAA3B,WACE,SAAC,KAAD,CAAeW,KAAK,SAAS/H,KAAM,MACnC,SAAC,KAAD,CACE+H,KAAK,QACL/H,KAAM,GACNqE,QAAS,IN0GZ,SAAqBxC,GAC1BA,EAAc,IACdC,IACAlD,EAAYF,aAAasJ,SAASC,YAClCrJ,EAAYJ,WAAWwJ,SAASC,YAChCrJ,EAAYH,cAAcuJ,SAASC,YACnCrJ,EAAYD,UAAUqJ,SAASC,WAChC,CMjHwBC,CAAYrG,SAG/B,gBACE2B,GAAG,gBACHqB,UAAU,SACV2C,OAAuB,UAAf5F,QAAgC0F,EAH1C,oBAOA,gBACE9D,GAAG,eACHqB,UAAU,SACV2C,OAAuB,aAAf5F,QAAmC0F,EAH7C,UAKE,SAAC,EAAD,CACEjF,sBAAuBA,OAG3B,gBACEmB,GAAG,kBACHqB,UAAU,SACV2C,QACG,CAAC,UAAW,YAAa,UAAUzF,SAASH,SAEzC0F,EANR,UASE,SAAC,EAAD,CACEtF,qBAAsBA,OAG1B,gBACEwB,GAAG,eACHqB,UAAU,SACV2C,OAAuB,SAAf5F,QAA+B0F,EAHzC,UAKE,SAAC,EAAD,CAAa/E,kBAAmBA,QAIvC,C","sources":["components/Tools/Sketch/utils.ts","components/Tools/Sketch/ColorButton.tsx","components/Tools/Sketch/SizeSlider.tsx","components/Tools/Sketch/LineSymbols.tsx","components/Tools/Sketch/PolygonSymbols.tsx","components/Tools/Sketch/TextSymbols.tsx","components/Tools/Sketch/Sketch.tsx"],"sourcesContent":["import MapView from \"@arcgis/core/views/MapView\";\nimport SketchViewModel from \"@arcgis/core/widgets/Sketch/SketchViewModel\";\nimport MapNotesLayer from \"@arcgis/core/layers/MapNotesLayer\";\nimport GraphicsLayer from \"@arcgis/core/layers/GraphicsLayer\";\nimport Color from \"@arcgis/core/Color\";\nimport SimpleFillSymbol from \"@arcgis/core/symbols/SimpleFillSymbol\";\nimport SimpleLineSymbol from \"@arcgis/core/symbols/SimpleLineSymbol\";\nimport TextSymbol from \"@arcgis/core/symbols/TextSymbol\";\n\nlet pointLayer: GraphicsLayer;\nlet polylineLayer: GraphicsLayer;\nlet polygonLayer: GraphicsLayer;\nlet textLayer: GraphicsLayer;\nlet sketchLayer: MapNotesLayer;\nlet selectedTool: string = \"\";\nlet fillSymbol = new SimpleFillSymbol({\n  color: [255, 0, 0, 0.5],\n  style: \"solid\",\n  outline: {\n    width: 2,\n    color: [255, 0, 0, 1],\n  },\n});\nlet lineSymbol = new SimpleLineSymbol({\n  width: 1,\n  color: [255, 0, 0, 1],\n  style: \"solid\",\n  cap: \"round\",\n  join: \"round\",\n});\nlet textSymbol = new TextSymbol({\n  color: [255, 0, 0, 1],\n  haloColor: [255, 255, 255, 1],\n  haloSize: \"1px\",\n  text: \"\",\n  xoffset: 3,\n  yoffset: 3,\n  font: {\n    // autocasts as new Font()\n    size: 10,\n    family: \"Aerial\",\n    weight: \"bold\",\n  },\n});\nlet pointSketchViewModel: SketchViewModel;\nlet polylineSketchViewModel: SketchViewModel;\n\nlet polygonSketchViewModel: SketchViewModel;\n\nlet textSketchViewModel: SketchViewModel;\n\nexport function initializeSketchViewModel(view: MapView) {\n  sketchLayer = new MapNotesLayer({\n    listMode: \"hide\",\n    id: \"notes-layer\",\n  });\n  view.map.add(sketchLayer);\n  pointLayer = sketchLayer.pointLayer;\n  polylineLayer = sketchLayer.polylineLayer;\n  polygonLayer = sketchLayer.polygonLayer;\n\n  textLayer = sketchLayer.textLayer;\n  // create a new sketch view model for each different map note type\n  // this allows both the creation and modification of each different map note\n  pointSketchViewModel = createSketchViewModels(pointLayer, view, false);\n  polylineSketchViewModel = createSketchViewModels(polylineLayer, view, false);\n  polygonSketchViewModel = createSketchViewModels(polygonLayer, view, false);\n  polygonSketchViewModel.activeFillSymbol = fillSymbol;\n  (polylineSketchViewModel as any).activeLineSymbol = lineSymbol as any;\n\n  textSketchViewModel = createSketchViewModels(textLayer, view, true);\n}\n\nfunction createSketchViewModels(\n  layer: GraphicsLayer,\n  view: MapView,\n  isText: boolean\n) {\n  const sketchVM = new SketchViewModel({\n    view,\n    layer,\n    updateOnGraphicClick: true,\n  });\n  sketchVM.on(\"create\", addGraphic);\n  if (!isText) {\n    // sketchVM.on(\"update\", updateMapNotes);\n  }\n  return sketchVM;\n}\n\nfunction addGraphic(e: any) {\n  if (e.state === \"complete\") {\n    if (e.graphic.geometry.type === \"polygon\") {\n      e.graphic.symbol = fillSymbol;\n      sketchLayer.polygonLayer.add(e.graphic);\n      setTimeout(() => polygonSketchViewModel.updateGraphics.add(e.graphic));\n\n      polygonSketchViewModel.create(e.tool);\n    }\n    if (e.graphic.geometry.type === \"polyline\") {\n      e.graphic.symbol = lineSymbol;\n      sketchLayer.polylineLayer.add(e.graphic);\n      polylineSketchViewModel.create(e.tool);\n    }\n    if (selectedTool === \"text\") {\n      e.graphic.symbol = textSymbol;\n      sketchLayer.textLayer.add(e.graphic);\n      textSketchViewModel.create(\"point\");\n    }\n  }\n}\n\nexport function toolSelected(\n  tool: string,\n  activeTool: string,\n  setActiveTool: Function\n) {\n  selectedTool = tool;\n  tool === activeTool ? setActiveTool(\"\") : setActiveTool(tool);\n  if (activeTool === \"\") {\n    cancelSketch();\n  }\n  if ([\"polygon\", \"rectangle\", \"circle\"].includes(tool)) {\n    polygonSketchViewModel.create(tool as any);\n  }\n  if ([\"polyline\"].includes(tool)) {\n    polylineSketchViewModel.create(tool as any);\n  }\n  if (tool === \"text\") {\n    polylineSketchViewModel.create(\"point\");\n  }\n}\n\nexport function polygonSymbolUpdated(\n  fillColor: Color,\n  outlineColor: Color,\n  width: number\n) {\n  fillSymbol.color = fillColor;\n  fillSymbol.outline.color = outlineColor;\n  fillSymbol.outline.width = width;\n  polygonSketchViewModel.activeFillSymbol = fillSymbol;\n  polygonSketchViewModel.updateGraphics.forEach((graphic) => {\n    graphic.symbol = fillSymbol;\n  });\n}\n\nexport function polylineSymbolUpdated(lineColor: Color, width: number) {\n  lineSymbol.color = lineColor;\n  lineSymbol.width = width;\n  polylineSketchViewModel.activeFillSymbol = lineSymbol as any;\n  polylineSketchViewModel.updateGraphics.forEach((graphic) => {\n    graphic.symbol = lineSymbol;\n  });\n}\n\nexport function textSymbolUpdated(\n  fontSize: number,\n  fontColor: Color,\n  haloSize: number,\n  haloColor: Color,\n  showHalo: boolean,\n  textContent: string\n) {\n  textSymbol.color = fontColor;\n  textSymbol.font.size = fontSize;\n  textSymbol.haloColor = haloColor;\n  textSymbol.haloSize = showHalo ? haloSize : 0;\n  textSymbol.text = textContent;\n  textSketchViewModel.pointSymbol = textSymbol as any;\n}\n\nfunction cancelSketch() {\n  pointSketchViewModel.cancel();\n  polylineSketchViewModel.cancel();\n  polygonSketchViewModel.cancel();\n  textSketchViewModel.cancel();\n}\n\nexport function clearSketch(setActiveTool: Function) {\n  setActiveTool(\"\");\n  cancelSketch();\n  sketchLayer.polygonLayer.graphics.removeAll();\n  sketchLayer.pointLayer.graphics.removeAll();\n  sketchLayer.polylineLayer.graphics.removeAll();\n  sketchLayer.textLayer.graphics.removeAll();\n}\n","import \"@esri/calcite-components/dist/components/calcite-color-picker-swatch\";\nimport \"@esri/calcite-components/dist/components/calcite-button\";\nimport \"@esri/calcite-components/dist/components/calcite-popover\";\nimport \"@esri/calcite-components/dist/components/calcite-color-picker\";\nimport \"@esri/calcite-components/dist/components/calcite-slider\";\nimport \"@esri/calcite-components/dist/components/calcite-input\";\nimport \"@esri/calcite-components/dist/components/calcite-label\";\n\nimport \"./Sketch.css\";\nimport Color from \"@arcgis/core/Color\";\nimport {\n  CalciteButton,\n  CalciteColorPicker,\n  CalciteColorPickerSwatch,\n  CalciteInput,\n  CalciteLabel,\n  CalcitePopover,\n  CalciteSlider,\n} from \"@esri/calcite-components-react\";\nimport React, { useEffect, useRef, useState } from \"react\";\n\nfunction ColorButton(args: any) {\n  const popover = useRef<HTMLCalcitePopoverElement>(null);\n  const picker = useRef<HTMLCalciteColorPickerElement>(null);\n  const [color, setColor] = useState<any>();\n  const [transparency, setTransparency] = useState<any>(0);\n  useEffect(() => {\n    if (args.color) {\n      setColor(args.color);\n      setTransparency((1 - args.color[3]) * 100);\n    }\n  }, []);\n\n  return (\n    <div>\n      <CalciteLabel>\n        {args.label} Color\n        <CalciteButton\n          id={`${args.id}-popover-button`}\n          width=\"half\"\n          iconEnd=\"pencil\"\n          color=\"neutral\"\n          appearance=\"outline\"\n        >\n          <CalciteColorPickerSwatch color={color}></CalciteColorPickerSwatch>\n        </CalciteButton>\n      </CalciteLabel>\n      <CalcitePopover\n        ref={popover}\n        overlayPositioning=\"fixed\"\n        placement=\"top-leading\"\n        label={\"\"}\n        referenceElement={`${args.id}-popover-button`}\n      >\n        <CalciteColorPicker\n          ref={picker}\n          hideSaved\n          hideHex\n          hideChannels\n          onCalciteColorPickerInput={(e) => setColor(e.target.value)}\n        ></CalciteColorPicker>\n        <CalciteButton\n          width=\"full\"\n          onClick={() => {\n            popover.current?.toggle();\n            const c = new Color(color);\n            c.a = 1 - transparency / 100;\n            args.colorSet(c);\n          }}\n        >\n          Done\n        </CalciteButton>\n      </CalcitePopover>\n      {!args.hideTransparency && (\n        <CalciteLabel>\n          {args.label} Transparency\n          <div className=\"slider-input\">\n            <CalciteSlider\n              max={100}\n              min={0}\n              value={transparency}\n              onCalciteSliderInput={(e) => {\n                let value: number = e.target.value as number;\n                if (value > 100) {\n                  value = 100;\n                }\n                if (value < 0) {\n                  value = 0;\n                }\n                setTransparency(value);\n                const c = new Color(color);\n                c.a = 1 - transparency / 100;\n                args.colorSet(c);\n              }}\n            ></CalciteSlider>\n            <CalciteInput\n              max={100}\n              min={0}\n              type=\"number\"\n              numberButtonType=\"none\"\n              suffixText=\"%\"\n              value={transparency}\n              onCalciteInputInput={(e) => {\n                let value: number = parseInt(e.target.value);\n                if (value > 100) {\n                  value = 100;\n                }\n                if (value < 0) {\n                  value = 0;\n                }\n\n                setTransparency(value);\n                const c = new Color(color);\n                c.a = 1 - transparency / 100;\n                args.colorSet(c);\n              }}\n            ></CalciteInput>\n          </div>\n        </CalciteLabel>\n      )}\n    </div>\n  );\n}\n\nexport default ColorButton;\n","import \"@esri/calcite-components/dist/components/calcite-slider\";\nimport \"@esri/calcite-components/dist/components/calcite-input\";\nimport \"@esri/calcite-components/dist/components/calcite-label\";\nimport {\n  CalciteInput,\n  CalciteLabel,\n  CalciteSlider,\n} from \"@esri/calcite-components-react\";\nimport { useEffect, useState } from \"react\";\n\nfunction SizeSlider(args: any) {\n  const [value, setValue] = useState<any>();\n  useEffect(() => {\n    setValue(args.value);\n  }, [args.value]);\n  return (\n    <CalciteLabel>\n      {args.label}\n      <div className=\"slider-input\">\n        <CalciteSlider\n          max={args.max}\n          min={args.min}\n          value={value}\n          onCalciteSliderInput={(e) => {\n            setValue(e.target.value);\n            args.sizeSet(e.target.value);\n          }}\n        ></CalciteSlider>\n        <CalciteInput\n          type=\"number\"\n          numberButtonType=\"none\"\n          min={args.min}\n          max={args.max}\n          value={value}\n          suffixText=\"px\"\n          onCalciteInputInput={(e) => {\n            setValue(parseFloat(e.target.value));\n            args.sizeSet(parseFloat(e.target.value));\n          }}\n        ></CalciteInput>\n      </div>\n    </CalciteLabel>\n  );\n}\nexport default SizeSlider;\n","import \"@esri/calcite-components/dist/components/calcite-color-picker-swatch\";\nimport \"@esri/calcite-components/dist/components/calcite-button\";\nimport \"./Sketch.css\";\nimport {\n  CalciteButton,\n  CalciteColorPickerSwatch,\n  CalciteInput,\n  CalciteLabel,\n} from \"@esri/calcite-components-react\";\nimport React, { useState } from \"react\";\nimport ColorButton from \"./ColorButton\";\nimport SizeSlider from \"./SizeSlider\";\nimport Color from \"@arcgis/core/Color\";\n\nfunction LineSymbols(args: any) {\n  const [lineColor, setLineColor] = useState<Color>(new Color([255, 0, 0, 1]));\n  const [width, setWidth] = useState(2);\n\n  return (\n    <div id=\"line-symbols\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"60\"\n        height={width.toString()}\n      >\n        <defs></defs>\n        <g transform=\"matrix(1,0,0,1,0,0)\">\n          <path\n            fill=\"none\"\n            fillRule=\"evenodd\"\n            stroke={lineColor?.toString()}\n            strokeWidth={width}\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeDasharray=\"none\"\n            strokeMiterlimit=\"4\"\n            d={`M ${(width / 2).toString()} ${(width / 2).toString()} L 49.5 ${(\n              width / 2\n            ).toString()}`}\n          ></path>\n        </g>\n      </svg>\n      <ColorButton\n        id=\"line\"\n        label=\"Line\"\n        color={lineColor.toRgba()}\n        colorSet={(color: any) => {\n          setLineColor(color);\n          args.polylineSymbolUpdated(lineColor, width);\n        }}\n      ></ColorButton>\n      <SizeSlider\n        value={width}\n        min={0.1}\n        max={18}\n        label=\"Width\"\n        sizeSet={(size: number) => {\n          setWidth(size);\n          args.polylineSymbolUpdated(lineColor, width);\n        }}\n      ></SizeSlider>\n    </div>\n  );\n}\n\nexport default LineSymbols;\n","import Color from \"@arcgis/core/Color\";\nimport React, { useState } from \"react\";\nimport ColorButton from \"./ColorButton\";\nimport SizeSlider from \"./SizeSlider\";\n\nfunction PolygonSymbols(args: any) {\n  const [fillColor, setFillColor] = useState<Color>(\n    new Color([255, 0, 0, 0.5])\n  );\n  const [outlineColor, setOutlineColor] = useState<Color>(\n    new Color([255, 0, 0, 1])\n  );\n  const [width, setWidth] = useState(2);\n  return (\n    <div id=\"polygon-symbols\">\n      <div>\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width={(23 + width).toString()}\n          height={(23 + width).toString()}\n        >\n          <defs></defs>\n          <g\n            transform={`matrix(${(\n              1.09523809 -\n              width * 0.004328966\n            ).toString()},0,0,${(\n              1.09523809 -\n              width * 0.004328966\n            ).toString()},${(width * 0.5 + 11).toString()},${(\n              width * 0.5 +\n              11\n            ).toString()})`}\n          >\n            <path\n              vectorEffect=\"non-scaling-stroke\"\n              fill={fillColor?.toString()}\n              fillRule=\"evenodd\"\n              stroke={outlineColor?.toString()}\n              strokeWidth={width}\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeDasharray=\"none\"\n              strokeMiterlimit=\"4\"\n              d=\"M -10,-10 L 10,0 L 10,10 L -10,10 L -10,-10 Z\"\n            ></path>\n          </g>\n        </svg>\n      </div>\n      <ColorButton\n        id=\"polygon-fill\"\n        color={fillColor.toRgba()}\n        label=\"Fill\"\n        colorSet={(c: any) => {\n          setFillColor(c);\n          args.polygonSymbolUpdated(fillColor, outlineColor, width);\n        }}\n      ></ColorButton>\n      <ColorButton\n        id=\"polygon-outline\"\n        color={outlineColor.toRgba()}\n        label=\"Outline\"\n        colorSet={(c: any) => {\n          setOutlineColor(c);\n          args.polygonSymbolUpdated(fillColor, outlineColor, width);\n        }}\n      ></ColorButton>\n      <SizeSlider\n        label=\"Outline Width\"\n        min={0.1}\n        max={18}\n        value={width}\n        sizeSet={(size: any) => {\n          setWidth(size);\n          args.polygonSymbolUpdated(fillColor, outlineColor, width);\n        }}\n      ></SizeSlider>\n    </div>\n  );\n}\n\nexport default PolygonSymbols;\n","import \"@esri/calcite-components/dist/components/calcite-input\";\nimport \"@esri/calcite-components/dist/components/calcite-label\";\nimport Color from \"@arcgis/core/Color\";\nimport {\n  CalciteInput,\n  CalciteLabel,\n  CalciteSwitch,\n} from \"@esri/calcite-components-react\";\nimport React, { useState } from \"react\";\nimport ColorButton from \"./ColorButton\";\n\nfunction TextSymbols(args: any) {\n  const [fontColor, setFontColor] = useState<Color>(new Color([255, 0, 0, 1]));\n  const [fontSize, setFontSize] = useState(10);\n  const [showHalo, setShowHalo] = useState(false);\n  const [haloSize, setHaloSize] = useState(1);\n  const [haloColor, setHaloColor] = useState<Color>(\n    new Color([255, 255, 255, 1])\n  );\n  const [textContent, setTextContent] = useState(\"\");\n\n  return (\n    <div id=\"text-symbols\">\n      <CalciteLabel>\n        Text\n        <CalciteInput\n          type=\"textarea\"\n          scale=\"m\"\n          value={textContent}\n          onCalciteInputInput={(e) => {\n            setTextContent(e.target.value);\n          }}\n          onCalciteInputChange={(e) => {\n            requestAnimationFrame(() => {\n              args.textSymbolUpdated(\n                fontSize,\n                fontColor,\n                haloSize,\n                haloColor,\n                showHalo,\n                textContent\n              );\n            });\n          }}\n        ></CalciteInput>\n      </CalciteLabel>\n      <ColorButton\n        id=\"font\"\n        label=\"Font\"\n        color={fontColor.toRgba()}\n        hideTransparency\n        colorSet={(color: any) => {\n          setFontColor(color);\n          args.textSymbolUpdated(\n            fontSize,\n            fontColor,\n            haloSize,\n            haloColor,\n            showHalo,\n            textContent\n          );\n        }}\n      ></ColorButton>\n      <CalciteLabel>\n        Font Size\n        <CalciteInput\n          type=\"number\"\n          min={5}\n          max={125}\n          value={fontSize.toString()}\n          onCalciteInputInput={(e) => {\n            setFontSize(parseFloat(e.target.value));\n            args.textSymbolUpdated(\n              fontSize,\n              fontColor,\n              haloSize,\n              haloColor,\n              showHalo,\n              textContent\n            );\n          }}\n        ></CalciteInput>\n      </CalciteLabel>\n      <CalciteLabel layout=\"inline\">\n        Halo\n        <CalciteSwitch\n          checked={showHalo ? true : undefined}\n          onCalciteSwitchChange={(e) => {\n            setShowHalo(e.target.checked);\n            args.textSymbolUpdated(\n              fontSize,\n              fontColor,\n              haloSize,\n              haloColor,\n              showHalo,\n              textContent\n            );\n          }}\n        ></CalciteSwitch>\n      </CalciteLabel>\n      <div id=\"halo\" hidden={showHalo ? undefined : true}>\n        <ColorButton\n          id=\"halo\"\n          label=\"\"\n          color={haloColor.toRgba()}\n          hideTransparency\n          colorSet={(color: any) => {\n            setHaloColor(color);\n            args.textSymbolUpdated(\n              fontSize,\n              fontColor,\n              haloSize,\n              haloColor,\n              showHalo,\n              textContent\n            );\n          }}\n        ></ColorButton>\n        <CalciteLabel>\n          Size\n          <CalciteInput\n            type=\"number\"\n            min={1}\n            max={10}\n            value={haloSize.toString()}\n            onCalciteInputInput={(e) => {\n              setHaloSize(parseFloat(e.target.value));\n              args.textSymbolUpdated(\n                fontSize,\n                fontColor,\n                haloSize,\n                haloColor,\n                showHalo,\n                textContent\n              );\n            }}\n          ></CalciteInput>\n        </CalciteLabel>\n      </div>\n    </div>\n  );\n}\n\nexport default TextSymbols;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport \"@esri/calcite-components/dist/components/calcite-action\";\nimport \"@esri/calcite-components/dist/components/calcite-action-group\";\n\nimport {\n  CalciteAction,\n  CalciteActionGroup,\n} from \"@esri/calcite-components-react\";\nimport \"./Sketch.css\";\nimport {\n  clearSketch,\n  initializeSketchViewModel,\n  polygonSymbolUpdated,\n  polylineSymbolUpdated,\n  textSymbolUpdated,\n  toolSelected,\n} from \"./utils\";\nimport LineSymbols from \"./LineSymbols\";\nimport PolygonSymbols from \"./PolygonSymbols\";\nimport TextSymbols from \"./TextSymbols\";\nfunction Sketch(args: any) {\n  const loaded = useRef(false);\n  const [activeTool, setActiveTool] = useState(\"\");\n  useEffect(() => {\n    if (!loaded.current) {\n      initializeSketchViewModel(args.view);\n    }\n  }, []);\n  return (\n    <div id=\"sketch-tools\">\n      <CalciteActionGroup layout=\"horizontal\">\n        <CalciteAction\n          active={activeTool === \"point\" ? true : undefined}\n          icon=\"pin\"\n          text={\"\"}\n          onClick={() => toolSelected(\"point\", activeTool, setActiveTool)}\n        ></CalciteAction>\n        <CalciteAction\n          active={activeTool === \"polyline\" ? true : undefined}\n          icon=\"line\"\n          text={\"\"}\n          onClick={() => toolSelected(\"polyline\", activeTool, setActiveTool)}\n        ></CalciteAction>\n        <CalciteAction\n          active={activeTool === \"polygon\" ? true : undefined}\n          icon=\"polygon\"\n          text={\"\"}\n          onClick={() => toolSelected(\"polygon\", activeTool, setActiveTool)}\n        ></CalciteAction>\n        <CalciteAction\n          active={activeTool === \"rectangle\" ? true : undefined}\n          icon=\"rectangle\"\n          text={\"\"}\n          onClick={() => toolSelected(\"rectangle\", activeTool, setActiveTool)}\n        ></CalciteAction>\n        <CalciteAction\n          active={activeTool === \"circle\" ? true : undefined}\n          icon=\"circle\"\n          text={\"\"}\n          onClick={() => toolSelected(\"circle\", activeTool, setActiveTool)}\n        ></CalciteAction>\n        <CalciteAction\n          active={activeTool === \"text\" ? true : undefined}\n          icon=\"text\"\n          text={\"\"}\n          onClick={() => toolSelected(\"text\", activeTool, setActiveTool)}\n        ></CalciteAction>\n      </CalciteActionGroup>\n      <CalciteActionGroup layout=\"horizontal\">\n        <CalciteAction icon=\"cursor\" text={\"\"}></CalciteAction>\n        <CalciteAction\n          icon=\"trash\"\n          text={\"\"}\n          onClick={() => clearSketch(setActiveTool)}\n        ></CalciteAction>\n      </CalciteActionGroup>\n      <div\n        id=\"point-symbols\"\n        className=\"symbol\"\n        hidden={activeTool !== \"point\" ? true : undefined}\n      >\n        point\n      </div>\n      <div\n        id=\"line-symbols\"\n        className=\"symbol\"\n        hidden={activeTool !== \"polyline\" ? true : undefined}\n      >\n        <LineSymbols\n          polylineSymbolUpdated={polylineSymbolUpdated}\n        ></LineSymbols>\n      </div>\n      <div\n        id=\"polygon-symbols\"\n        className=\"symbol\"\n        hidden={\n          ![\"polygon\", \"rectangle\", \"circle\"].includes(activeTool)\n            ? true\n            : undefined\n        }\n      >\n        <PolygonSymbols\n          polygonSymbolUpdated={polygonSymbolUpdated}\n        ></PolygonSymbols>\n      </div>\n      <div\n        id=\"text-symbols\"\n        className=\"symbol\"\n        hidden={activeTool !== \"text\" ? true : undefined}\n      >\n        <TextSymbols textSymbolUpdated={textSymbolUpdated}></TextSymbols>\n      </div>\n    </div>\n  );\n}\n\nexport default Sketch;\n"],"names":["pointLayer","polylineLayer","polygonLayer","textLayer","sketchLayer","pointSketchViewModel","polylineSketchViewModel","polygonSketchViewModel","textSketchViewModel","selectedTool","fillSymbol","SimpleFillSymbol","color","style","outline","width","lineSymbol","SimpleLineSymbol","cap","join","textSymbol","TextSymbol","haloColor","haloSize","text","xoffset","yoffset","font","size","family","weight","createSketchViewModels","layer","view","isText","sketchVM","SketchViewModel","updateOnGraphicClick","on","addGraphic","e","state","graphic","geometry","type","symbol","add","setTimeout","updateGraphics","create","tool","toolSelected","activeTool","setActiveTool","cancelSketch","includes","polygonSymbolUpdated","fillColor","outlineColor","activeFillSymbol","forEach","polylineSymbolUpdated","lineColor","textSymbolUpdated","fontSize","fontColor","showHalo","textContent","pointSymbol","cancel","args","popover","useRef","picker","setColor","useState","transparency","setTransparency","useEffect","label","id","iconEnd","appearance","ref","overlayPositioning","placement","referenceElement","hideSaved","hideHex","hideChannels","onCalciteColorPickerInput","target","value","onClick","current","toggle","c","Color","a","colorSet","hideTransparency","className","max","min","onCalciteSliderInput","numberButtonType","suffixText","onCalciteInputInput","parseInt","setValue","sizeSet","parseFloat","setLineColor","setWidth","xmlns","height","toString","transform","fill","fillRule","stroke","strokeWidth","strokeLinecap","strokeLinejoin","strokeDasharray","strokeMiterlimit","d","toRgba","setFillColor","setOutlineColor","vectorEffect","setFontColor","setFontSize","setShowHalo","setHaloSize","setHaloColor","setTextContent","scale","onCalciteInputChange","requestAnimationFrame","layout","checked","undefined","onCalciteSwitchChange","hidden","loaded","MapNotesLayer","listMode","map","activeLineSymbol","active","icon","graphics","removeAll","clearSketch"],"sourceRoot":""}