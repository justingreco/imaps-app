{"version":3,"file":"static/js/7564.70bf8c66.chunk.js","mappings":"wPAQA,MAAMA,GAAgBC,EAAAA,EAAAA,OAAK,IAAM,iCAE1B,SAASC,EACdC,EACAC,GAEA,OAAO,IAAIC,SAAQ,CAACC,EAASC,MAoB/B,SAA6BH,GAC3B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAM,IAAIC,EAAAA,EAAO,CACrBC,WAAY,CACVC,GAAI,sCAGRH,EAAII,OAAOC,MAAK,KACCT,EAAKI,IAAIM,UACrBC,QAAQC,GACe,UAAfA,EAAMC,OAEdC,UACIC,SAASC,IACd,MAAMC,EAAQb,EAAIM,UAAUQ,MAAMN,GACV,UAAfA,EAAMC,MAAoBD,EAAMO,QAAUH,EAAMG,QAGxDH,EAA4BI,QAC3BH,EAAMI,OACHV,QAAQC,QAGLU,IADCN,EAA4BO,cAAcX,EAAML,MAIpDO,UARL,IAWFZ,GAAQ,EAAR,GAtBF,GAyBH,EAnDGsB,CAAoBxB,GAAMS,MAAK,KAC7B,MAAMY,EAAS,IAAII,EAAAA,EAAU,CAC3BzB,KAAMA,EACN0B,UAAW3B,EACX4B,wBAAyBC,IAE3BP,EAAOQ,GACL,kBACCC,IACgC,aAA3BA,EAAMC,KAAKnB,MAAMO,OACnBa,EAAqBF,EACtB,IAGL5B,EAAQmB,EAAR,GAdF,GAiBH,CAmCD,MAkBaW,EACXF,IAEA,GAA+B,aAA3BA,EAAMC,KAAKnB,MAAMO,MAAsB,CARhBP,EAUvBkB,EAAMC,KAAKnB,OAViCqB,EAW5CH,EAAMC,KAAKG,iBAVFC,OAAS,GAdC,EAACvB,EAAqBwB,KAC7C,MAAMC,EAAYzB,EAAMyB,SAAmCC,QACvDF,GACDC,EAASE,OAAmCC,QAAQC,MAAMC,EAAI,EAC9DL,EAASE,OAAmCC,QAAQC,MAAME,EAAI,EAC9DN,EAASE,OAAmCC,QAAQC,MAAMG,EAAI,IAE9DP,EAASE,OAAmCC,QAAQC,MAAMC,EAAI,IAC9DL,EAASE,OAAmCC,QAAQC,MAAME,EAAI,IAC9DN,EAASE,OAAmCC,QAAQC,MAAMG,EAAI,KAEjEhC,EAAMyB,SAAWA,CAAjB,EAIEQ,CAAiBjC,GAAQqB,EAASa,UAAU,GAAGA,UAAU,GAAGC,OAWtDjB,EAAMC,KAAKnB,MAA8BoC,gBAC5ClB,EAAMC,KAAKnB,MAA8BoC,eAAgB,GAE5D,MAMMC,EANWnB,EAAMC,KAAKG,gBACzBY,UAAU,GACVnC,QAAQuC,GACCA,EAAyBH,QAGL3C,KAAK8C,GAC3BA,EAAyB/B,QAG7BgC,EAAsBC,EAAyBzC,QAClD0C,GACQJ,EAAeK,SAASD,EAAWlC,SAGxCoC,EAAcJ,EAAoB/C,KAAKiD,GACpCA,EAAWA,aAEdA,EAAaE,EAAYC,KAAK,6BACnC1B,EAAMC,KAAKnB,MAA8B6C,aAAe,GAGxD3B,EAAMC,KAAKnB,MAA8B6C,aAAe,CACvD,CAEElB,OAAQ,CACN1B,KAAM,OACN4B,MAAO,QACPiB,UAAW,QACXC,SAAU,EACVC,KAAM,CACJC,OAAQ,4BACRC,MAAO,SACPC,OAAQ,SAGZC,oBAAqB,CACnBX,WAAYA,GAEdY,SAAU,EACVC,SAAU,KAWf,CAnEyB,IAACtD,EAAqBqB,CAmE/C,EAEGmB,EAAkC,CACtC,CACEC,WAAa,8CACblC,MAAO,WAET,CACEkC,WAAa,sBACblC,MAAO,OAET,CACEkC,WAAa,mBACblC,MAAO,QAET,CACEkC,WAAa,8JACblC,MAAO,aAET,CACEkC,WAAa,sCACblC,MAAO,eAuDLgD,EAAepC,IACnB,GACEA,EAAKqC,UACJrC,EAAKsC,OACc,UAApBtC,EAAKnB,MAAMC,WACSS,IAApBS,EAAKnB,MAAMC,KACX,CACA,MAAMyD,EAASC,SAASC,cAAc,qBACzBC,EAAAA,EAAAA,YAAWH,GACnBI,QACH,SAAC,EAAAC,SAAD,CAAUC,SAAU,GAApB,UACE,SAAChF,EAAD,CAAemD,MAAOhB,EAAKnB,MAAMiE,QAASjE,MAAOmB,EAAKnB,WAI1DmB,EAAKsC,MAAQ,CACXS,QAAS,CAACR,EAAQ,UAClBS,MAAM,EAET,GAGGnD,EAAwBE,IAC5B,MAAMC,EAAOD,EAAMC,KACnBoC,EAAYpC,GACZA,EAAKgD,KAAOhD,EAAKnB,MAAMwD,QACvBrC,EAAKnB,MAAMoE,MAAM,WAAYZ,IAI3BrC,EAAKgD,KAAOX,EACZD,EAAYpC,GAERqC,IACErC,EAAKnB,MAAMqE,QACkB,UAA3BlD,EAAKnB,MAAMqE,OAAOpE,OACpBkB,EAAKnB,MAAMqE,OAAOb,SAAU,GAG5BrC,EAAKnB,MAAMqE,OAAOA,QACkB,UAAlClD,EAAKnB,MAAMqE,OAAOA,OAAOpE,OAC3BkB,EAAKnB,MAAMqE,OAAOA,OAAOb,SAAU,GAGxC,IA/F4BrC,KAC/B,GACuB,aAArBA,EAAKnB,MAAMO,OACS,UAApBY,EAAKnB,MAAMC,MACqB,IAAhCkB,EAAKG,gBAAgBC,OACrB,CACA,IAAI+C,EAAsB,IAAIC,EAAAA,EAC9BD,EAAQ9D,QACNgC,EAAyBhD,KAAKiD,IAAgB,IAAD,EAC3C,OAAO,IAAI+B,EAAAA,EAAa,CACtBrC,MAAK,UAAEhB,EAAKnB,MAAM6C,oBAAb,aAAE,EAAyBvC,MAAMmE,IAAe,IAAD,EAClD,OACE,UAAAA,EAAKrB,2BAAL,eAA0BX,WAAWC,SACnCD,EAAWA,cACRtB,EAAKnB,MAAMoC,aAHlB,IAMF7B,MAAOkC,EAAWlC,MAClBiD,SAAS,GATX,KAaHrC,EAAyBG,gBAAgBoD,KAAKJ,GAE/CA,EAAU,IAAIC,EAAAA,EACdD,EAAQK,IACN,IAAIH,EAAAA,EAAa,CACfrC,MAAOhB,EAAKnB,MAAMyB,SAASE,OAAOC,QAAQC,MAAM+C,SAChDrE,MAAO,gBACPiD,SAAS,KAGZrC,EAAyBG,gBAAgBoD,KAAKJ,GAE9CnD,EAAyB0D,aAAc,EACxCC,YAAW,KACT,MAAMvE,EAAQoD,SAASC,cAAc,MACrCrD,EAAMZ,GAAK,uBACXY,EAAMwE,YAAc,SACpBxE,EAAMyE,aAAa,QAAS,6BAC5B,MAAMC,EAAUtB,SAASuB,cAAc,kCAE9B,OAAPD,QAAO,IAAPA,GAAAA,EAASE,gBACRxB,SAASyB,eAAe,yBAEzBH,EAAQI,QAAQ9E,EACjB,GACA,IACJ,GAiDD+E,CAAwBnE,EAAxB,ECnQWoE,EAAUC,IACrB,MAAMrG,GAAMsG,EAAAA,EAAAA,UAENC,GAASD,EAAAA,EAAAA,SAAO,IACfE,EAAWC,IAAgBC,EAAAA,EAAAA,aAC3BC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,IACpCG,EAAUC,IAAeJ,EAAAA,EAAAA,WAAS,IAEzCK,EAAAA,EAAAA,YAAU,KACHR,EAAOS,UACVT,EAAOS,SAAU,EACjBjH,EAAiBC,EAAIgH,QAASX,EAAKpG,MAAMS,MACtC8F,IACCC,EAAaD,GACbA,EAAUS,MAAK,KACbL,GAAa,EAAb,GADF,KAMC,KACLJ,IAAS,OAAIA,QAAJ,IAAIA,GAAAA,EAAWU,UAAxB,IAED,KAEHH,EAAAA,EAAAA,YAAU,KACRD,EAAYT,EAAKQ,SAAjB,GACC,CAACR,EAAKQ,WACT,MAAMM,GAAiBC,EAAAA,EAAAA,cAAaC,IAClChB,EAAKc,gBAAL,GACC,IAEH,OACE,SAAC,KAAD,CACE3G,GAAG,eACH8G,QAAQ,SACRC,QAASV,EACTW,QAASX,QAAkBtF,EAC3BkG,WAAYZ,QAAkBtF,EAC9BmG,aAAW,EACXC,sBAAuBR,EAPzB,UASE,iBAAKS,UAAU,SAAf,UACGpB,IACC,iBAAKoB,UAAU,aAAf,WACE,SAAC,IAAD,CACEC,WAAS,EACTC,YAAY,uBACZC,MAAM,IACNC,oBAAsBX,IAChBb,GDoNQ,EAC1BxD,EACAwD,KAEKxD,IACHA,EAAQ,IAEVwD,EAAUyB,iBAAiBjH,SAASgB,IAClC,GAAwB,UAApBA,EAAKnB,MAAMC,KAAkB,CAC/B,IAAIkE,GAAO,EAsBiB,IAAD,QAShB,QA9BVhD,EAAKnB,MAA4BS,OAAON,SAASH,IAC5CA,EAAMO,MAAM8G,cAAc3E,SAASP,EAAMkF,gBAC3CrH,EAAMsH,SAAW,OACjBnD,GAAO,GAEPnE,EAAMsH,SAAW,OAGA,UAAftH,EAAMC,MACPD,EAA4BS,OAAON,SAASoH,IACvCA,EAAShH,MAAM8G,cAAc3E,SAASP,EAAMkF,gBAC9CrH,EAAMsH,SAAW,OACjBC,EAASD,SAAW,OACpBnD,GAAO,GAEPoD,EAASD,SAAW,MACrB,GAEJ,IAEHnG,EAAKgD,KAAOhC,EAAMZ,OAAS,GAAK4C,IAC3BhC,EAAMZ,QAAU4C,KACnB,UAAAR,SACGyB,eACE,GAAGO,EAAkBhG,MAAOwB,EAAaqG,qBAF9C,mBAIIrC,qBAJJ,mBAImBA,qBAJnB,mBAIkCA,qBAJlC,SAIiDsC,gBAC7C,WAGDtD,GACH,UAAAR,SACGyB,eACE,GAAGO,EAAkBhG,MAAOwB,EAAaqG,qBAF9C,mBAIIrC,qBAJJ,mBAImBA,qBAJnB,mBAIkCA,qBAJlC,SAIiDH,aAC7C,SACA,GAGP,IA3CH,EC1NgB0C,CAAalB,EAAEmB,OAAOxF,MAAOwD,EAC9B,KAGL,SAAC,KAAD,CACEiC,KAAK,QACLC,KAAK,WACLX,MAAM,IACNY,QAAS,KDiQKC,OACiB,QADjBA,ECjQapC,SDkQI,IAAGoC,OAAH,EAAGA,EAAM3I,KAAKI,IAAIM,UAAUC,QAAOC,GACtD,UAAfA,EAAMC,QAERE,SAASC,IACdA,EAAMoD,QAA0B,aAAhBpD,EAAMG,MACtBH,EAAMK,OAAON,SAAQH,IACnBA,EAAMwD,QAA0B,aAAhBxD,EAAMO,KAAtB,GADF,GC3QQ,QAQJ,gBAAKpB,IAAKA,KACV,SAAC,KAAD,CACE6I,SAAO,EACPtB,QAAQZ,QAAYpF,QAlC5B,EAwCF,G","sources":["components/Panels/Layers/utils/layers.tsx","components/Panels/Layers/Layers.tsx"],"sourcesContent":["import MapView from \"@arcgis/core/views/MapView\";\nimport WebMap from \"@arcgis/core/WebMap\";\nimport Collection from \"@arcgis/core/core/Collection\";\nimport ActionToggle from \"@arcgis/core/support/actions/ActionToggle\";\nimport LayerList from \"@arcgis/core/widgets/LayerList\";\nimport { lazy, Suspense } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport FeatureLayer from \"@arcgis/core/layers/FeatureLayer\";\nconst OpacitySlider = lazy(() => import(\"../OpacitySlider\"));\n\nexport function initializeLayers(\n  ref: HTMLDivElement,\n  view: MapView\n): Promise<LayerList> {\n  return new Promise((resolve, reject) => {\n    addLayersFromWebmap(view).then(() => {\n      const layers = new LayerList({\n        view: view,\n        container: ref,\n        listItemCreatedFunction: layerListItemCreated,\n      });\n      layers.on(\n        \"trigger-action\",\n        (event: __esri.LayerListTriggerActionEvent) => {\n          if (event.item.layer.title === \"Property\") {\n            togglePropertyLabels(event);\n          }\n        }\n      );\n      resolve(layers);\n    });\n  });\n}\n\nfunction addLayersFromWebmap(view: MapView) {\n  return new Promise((resolve, reject) => {\n    const map = new WebMap({\n      portalItem: {\n        id: \"95092428774c4b1fb6a3b6f5fed9fbc4\",\n      },\n    });\n    map.load().then(() => {\n      const groups = view.map.allLayers\n        .filter((layer) => {\n          return layer.type === \"group\";\n        })\n        .toArray();\n      groups.forEach((group) => {\n        const match = map.allLayers.find((layer) => {\n          return layer.type === \"group\" && layer.title === group.title;\n        }) as __esri.GroupLayer;\n\n        (group as __esri.GroupLayer).addMany(\n          match.layers\n            .filter((layer) => {\n              return (\n                (group as __esri.GroupLayer).findLayerById(layer.id) ===\n                undefined\n              );\n            })\n            .toArray()\n        );\n      });\n      resolve(true);\n    });\n  });\n}\nconst setPropertyColor = (layer: FeatureLayer, light: boolean) => {\n  const renderer = (layer.renderer as __esri.SimpleRenderer).clone();\n  if (light) {\n    (renderer.symbol as __esri.SimpleFillSymbol).outline.color.r = 0;\n    (renderer.symbol as __esri.SimpleFillSymbol).outline.color.g = 0;\n    (renderer.symbol as __esri.SimpleFillSymbol).outline.color.b = 0;\n  } else {\n    (renderer.symbol as __esri.SimpleFillSymbol).outline.color.r = 255;\n    (renderer.symbol as __esri.SimpleFillSymbol).outline.color.g = 255;\n    (renderer.symbol as __esri.SimpleFillSymbol).outline.color.b = 255;\n  }\n  layer.renderer = renderer;\n};\nconst togglePropertyColor = (layer: FeatureLayer, sections: any) => {\n  if (sections.length > 1) {\n    setPropertyColor(layer, !sections.getItemAt(1).getItemAt(0).value);\n  }\n};\nexport const togglePropertyLabels = (\n  event: __esri.LayerListTriggerActionEvent\n) => {\n  if (event.item.layer.title === \"Property\") {\n    togglePropertyColor(\n      event.item.layer as FeatureLayer,\n      event.item.actionsSections\n    );\n    if (!(event.item.layer as __esri.FeatureLayer).labelsVisible) {\n      (event.item.layer as __esri.FeatureLayer).labelsVisible = true;\n    }\n    const selected = event.item.actionsSections\n      .getItemAt(0)\n      .filter((section) => {\n        return (section as ActionToggle).value;\n      });\n\n    const selectedTitles = selected.map((section) => {\n      return (section as ActionToggle).title;\n    });\n\n    const selectedExpressions = propertyLabelExpressions.filter(\n      (expression) => {\n        return selectedTitles.includes(expression.title);\n      }\n    );\n    const expressions = selectedExpressions.map((expression) => {\n      return expression.expression;\n    });\n    const expression = expressions.join(\"+ TextFormatting.NewLine+\");\n    (event.item.layer as __esri.FeatureLayer).labelingInfo = [];\n\n    //if ((event.action as ActionToggle).value) {\n    (event.item.layer as __esri.FeatureLayer).labelingInfo = [\n      {\n        // autocasts as new LabelClass()\n        symbol: {\n          type: \"text\", // autocasts as new TextSymbol()\n          color: \"black\",\n          haloColor: \"white\",\n          haloSize: 1,\n          font: {\n            family: \"AvenirNext LT Pro Regular\",\n            style: \"normal\",\n            weight: \"bold\",\n          },\n        },\n        labelExpressionInfo: {\n          expression: expression,\n        },\n        maxScale: 0,\n        minScale: 5000,\n      } as any,\n    ];\n    // }\n    // } else {\n    //   (event.item.layer as __esri.FeatureLayer).labelingInfo = (\n    //     event.item.layer as __esri.FeatureLayer\n    //   ).labelingInfo.filter((info) => {\n    //     return info.labelExpressionInfo.expression != expression.expression;\n    //   });\n    // }\n  }\n};\nconst propertyLabelExpressions: any[] = [\n  {\n    expression: `First(Split($feature['SITE_ADDRESS'], ' '))`,\n    title: \"Address\",\n  },\n  {\n    expression: `$feature['PIN_NUM']`,\n    title: \"PIN\",\n  },\n  {\n    expression: `$feature['REID']`,\n    title: \"REID\",\n  },\n  {\n    expression: `When(IsEmpty($feature[\"SALE_DATE\"]),null, Concatenate(Month($feature[\"SALE_DATE\"])+1, '/',Day($feature[\"SALE_DATE\"]), '/',Year($feature[\"SALE_DATE\"])))`,\n    title: \"Sale Date\",\n  },\n  {\n    expression: `Text($feature.TOTSALPRICE,'$#,###')`,\n    title: \"Sale Price\",\n  },\n];\n\nconst addPropertyLabelToggles = (item: any) => {\n  if (\n    item.layer.title === \"Property\" &&\n    item.layer.type !== \"group\" &&\n    item.actionsSections.length === 0\n  ) {\n    let toggles: Collection = new Collection();\n    toggles.addMany(\n      propertyLabelExpressions.map((expression) => {\n        return new ActionToggle({\n          value: item.layer.labelingInfo?.find((info: any) => {\n            return (\n              info.labelExpressionInfo?.expression.includes(\n                expression.expression\n              ) && item.layer.labelsVisible\n            );\n          }),\n          title: expression.title,\n          visible: true,\n        });\n      })\n    );\n    (item as __esri.ListItem).actionsSections.push(toggles);\n\n    toggles = new Collection();\n    toggles.add(\n      new ActionToggle({\n        value: item.layer.renderer.symbol.outline.color.isBright,\n        title: \"Light Outline\",\n        visible: true,\n      }) as any\n    );\n    (item as __esri.ListItem).actionsSections.push(toggles);\n\n    (item as __esri.ListItem).actionsOpen = true;\n    setTimeout(() => {\n      const title = document.createElement(\"h4\");\n      title.id = \"labels-actions-title\";\n      title.textContent = \"Labels\";\n      title.setAttribute(\"style\", \"padding: 0.5em;margin: 0;\");\n      const actions = document.querySelector(\".esri-layer-list__item-actions\");\n      if (\n        actions?.parentElement &&\n        !document.getElementById(\"labels-actions-title\")\n      ) {\n        actions.prepend(title);\n      }\n    }, 500);\n  }\n};\n\nconst createPanel = (item: __esri.ListItem) => {\n  if (\n    item.visible &&\n    !item.panel &&\n    item.layer.type !== \"group\" &&\n    item.layer.type !== undefined\n  ) {\n    const slider = document.createElement(\"slider-container\");\n    const root = createRoot(slider as HTMLDivElement);\n    root.render(\n      <Suspense fallback={\"\"}>\n        <OpacitySlider value={item.layer.opacity} layer={item.layer} />\n      </Suspense>\n    );\n\n    item.panel = {\n      content: [slider, \"legend\"],\n      open: false,\n    } as __esri.ListItemPanel;\n  }\n};\n\nconst layerListItemCreated = (event: any): void => {\n  const item = event.item;\n  createPanel(item);\n  item.open = item.layer.visible;\n  item.layer.watch(\"visible\", (visible: boolean) => {\n    // if (item.panel) {\n    //   item.panel.open = visible;\n    // }\n    item.open = visible;\n    createPanel(item);\n\n    if (visible) {\n      if (item.layer.parent) {\n        if (item.layer.parent.type === \"group\") {\n          item.layer.parent.visible = true;\n        }\n      }\n      if (item.layer.parent.parent) {\n        if (item.layer.parent.parent.type === \"group\") {\n          item.layer.parent.parent.visible = true;\n        }\n      }\n    }\n  });\n  addPropertyLabelToggles(item);\n};\n\nexport const filterLayers = (\n  value: string,\n  layerList: __esri.LayerList\n): void => {\n  if (!value) {\n    value = \"\";\n  }\n  layerList.operationalItems.forEach((item: __esri.ListItem) => {\n    if (item.layer.type === \"group\") {\n      let open = false;\n      (item.layer as __esri.GroupLayer).layers.forEach((layer) => {\n        if (layer.title.toLowerCase().includes(value.toLowerCase())) {\n          layer.listMode = \"show\";\n          open = true;\n        } else {\n          layer.listMode = \"hide\";\n        }\n        //handle second level group layers\n        if (layer.type === \"group\") {\n          (layer as __esri.GroupLayer).layers.forEach((sublayer) => {\n            if (sublayer.title.toLowerCase().includes(value.toLowerCase())) {\n              layer.listMode = \"show\";\n              sublayer.listMode = \"show\";\n              open = true;\n            } else {\n              sublayer.listMode = \"hide\";\n            }\n          });\n        }\n      });\n      item.open = value.length > 0 && open;\n      if (!value.length || open) {\n        document\n          .getElementById(\n            `${(layerList as any).id}_${(item as any).uid}__title`\n          )\n          ?.parentElement?.parentElement?.parentElement?.removeAttribute(\n            \"hidden\"\n          );\n      }\n      if (!open) {\n        document\n          .getElementById(\n            `${(layerList as any).id}_${(item as any).uid}__title`\n          )\n          ?.parentElement?.parentElement?.parentElement?.setAttribute(\n            \"hidden\",\n            \"\"\n          );\n      }\n    }\n  });\n};\n\nexport const resetLayers = (list: __esri.LayerList) => {\n  const groups: Collection<__esri.GroupLayer> = list?.view.map.allLayers.filter(layer => {\n    return layer.type === 'group';\n  }) as Collection<__esri.GroupLayer>;\n  groups.forEach((group) => {\n    group.visible = group.title === 'Property';\n    group.layers.forEach(layer => {\n      layer.visible = layer.title === \"Property\";\n    })\n  });  \n};\n","import {\n  CalciteAction,\n  CalciteInput,\n  CalciteScrim,\n  CalcitePanel,\n} from \"@esri/calcite-components-react\";\nimport React, { useCallback } from \"react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { filterLayers, initializeLayers, resetLayers } from \"./utils/layers\";\nimport \"./Layers.css\";\nexport const Layers = (args: any) => {\n  const ref = useRef() as any;\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const loaded = useRef(false);\n  const [layerList, setLayerList] = useState<__esri.LayerList>();\n  const [isLoading, setIsLoading] = useState(true);\n  const [isActive, setIsActive] = useState(false);\n\n  useEffect(() => {\n    if (!loaded.current) {\n      loaded.current = true;\n      initializeLayers(ref.current, args.view).then(\n        (layerList: __esri.LayerList) => {\n          setLayerList(layerList);\n          layerList.when(() => {\n            setIsLoading(false);\n          });\n        }\n      );\n    }\n    return () => {\n      layerList && layerList?.destroy();\n    };\n  }, []); // only after first render\n\n  useEffect(() => {\n    setIsActive(args.isActive);\n  }, [args.isActive]);\n  const panelDismissed = useCallback((e: any) => {\n    args.panelDismissed();\n  }, []);\n\n  return (\n    <CalcitePanel\n      id=\"layers-panel\"\n      heading=\"Layers\"\n      hidden={!isActive}\n      closed={!isActive ? true : undefined}\n      dismissed={!isActive ? true : undefined}\n      dismissible\n      onCalcitePanelDismiss={panelDismissed}\n    >\n      <div className=\"layers\">\n        {layerList && (\n          <div className=\"row sticky\">\n            <CalciteInput\n              clearable\n              placeholder=\"Filter by layer name\"\n              scale=\"m\"\n              onCalciteInputInput={(e) => {\n                if (layerList) {\n                  filterLayers(e.target.value, layerList);\n                }\n              }}\n            ></CalciteInput>\n            <CalciteAction\n              text=\"clear\"\n              icon=\"viewHide\"\n              scale=\"s\"\n              onClick={() => resetLayers(layerList)}\n            ></CalciteAction>\n          </div>\n        )}\n        <div ref={ref}></div>\n        <CalciteScrim\n          loading\n          hidden={isLoading ? undefined : true}\n        ></CalciteScrim>\n      </div>\n    </CalcitePanel>\n  );\n};\nexport default Layers;\n"],"names":["OpacitySlider","lazy","initializeLayers","ref","view","Promise","resolve","reject","map","WebMap","portalItem","id","load","then","allLayers","filter","layer","type","toArray","forEach","group","match","find","title","addMany","layers","undefined","findLayerById","addLayersFromWebmap","LayerList","container","listItemCreatedFunction","layerListItemCreated","on","event","item","togglePropertyLabels","sections","actionsSections","length","light","renderer","clone","symbol","outline","color","r","g","b","setPropertyColor","getItemAt","value","labelsVisible","selectedTitles","section","selectedExpressions","propertyLabelExpressions","expression","includes","expressions","join","labelingInfo","haloColor","haloSize","font","family","style","weight","labelExpressionInfo","maxScale","minScale","createPanel","visible","panel","slider","document","createElement","createRoot","render","Suspense","fallback","opacity","content","open","watch","parent","toggles","Collection","ActionToggle","info","push","add","isBright","actionsOpen","setTimeout","textContent","setAttribute","actions","querySelector","parentElement","getElementById","prepend","addPropertyLabelToggles","Layers","args","useRef","loaded","layerList","setLayerList","useState","isLoading","setIsLoading","isActive","setIsActive","useEffect","current","when","destroy","panelDismissed","useCallback","e","heading","hidden","closed","dismissed","dismissible","onCalcitePanelDismiss","className","clearable","placeholder","scale","onCalciteInputInput","operationalItems","toLowerCase","listMode","sublayer","uid","removeAttribute","filterLayers","target","text","icon","onClick","list","loading"],"sourceRoot":""}