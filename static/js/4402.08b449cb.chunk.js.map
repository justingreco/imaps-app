{"version":3,"file":"static/js/4402.08b449cb.chunk.js","mappings":"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","sources":["components/Panels/Layers/DevPlanFilter.tsx","components/Panels/Layers/utils/layers.tsx","components/Panels/Layers/utils/tips.ts","components/Panels/Layers/utils/useLayers.ts","components/Panels/Layers/Layers.tsx"],"sourcesContent":["import {\n    CalciteSlider,\n  } from \"@esri/calcite-components-react\";\n  import React from \"react\";\n  import { useEffect, useRef, useState } from \"react\";\n  import \"./Layers.css\";\n  export const DevPlanFilter = (args: any) => {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const loaded = useRef(false);\n    const [maxYear, setMaxYear] = useState<number>(0);\n    const [minYear, setMinYear] = useState<number>(0);\n\n    const getMinMax = async (layer: __esri.FeatureLayer, datefield: string) => {\n        (args.layer as __esri.FeatureLayer).queryFeatures({\n          where: `EXTRACT(YEAR,${datefield}) >= 2010`,\n          returnGeometry: false,\n            outStatistics: [{\n              statisticType: 'max',\n              onStatisticField: datefield,\n              outStatisticFieldName: 'MAX_DATE'\n            },{\n              statisticType: 'min',\n              onStatisticField: datefield,\n              outStatisticFieldName: 'MIN_DATE'\n            }],\n            outFields: ['MAX_DATE','MIN_DATE']\n\n        }).then((stats) => {\n          if (stats?.features.length) {\n            const max = new Date(stats.features[0].getAttribute('MAX_DATE')).getFullYear();\n            const min = new Date(stats.features[0].getAttribute('MIN_DATE')).getFullYear();\n            layer.definitionExpression = `EXTRACT(YEAR FROM ${args.datefield}) >= ${min}\n            AND EXTRACT(YEAR FROM ${args.datefield}) <= ${max}\n            `;\n            layer.refresh();\n            setMaxYear(max);\n            setMinYear(min);\n            \n          }\n        }).catch(reason => {\n          console.log(reason);\n        });\n\n    }\n    useEffect( () => {\n     if (args.layer && args.datefield && !loaded.current) {\n        loaded.current = true;\n        getMinMax(args.layer, args.datefield).then(() => {\n\n        });\n     }\n\n    }, []); // only after first render\n\n  \n    return (\n      <div>\n        {/* <CalciteInputDatePicker overlay-positioning=\"fixed\" scale=\"m\" max={`2022-11-11`}\n        onCalciteInputDatePickerChange={e => {\n            console.log(e.detail);\n        }}\n        ></CalciteInputDatePicker> */}\n        <CalciteSlider \n          labelHandles \n          labelTicks \n          min={minYear} \n          max={maxYear} \n          maxValue={maxYear} \n          minValue={maxYear - 1} \n          minLabel={minYear.toString()} \n          maxLabel={maxYear.toString()}\n          onCalciteSliderChange={(e) => {\n            args.layer.definitionExpression = `EXTRACT(YEAR FROM ${args.datefield}) >= ${e.target.minValue}\n            AND EXTRACT(YEAR FROM ${args.datefield}) <= ${e.target.maxValue}\n            `;\n            args.layer.refresh();\n          }}\n          ></CalciteSlider>\n      </div>\n    );\n  };\n  export default DevPlanFilter;\n  ","import MapView from \"@arcgis/core/views/MapView\";\nimport WebMap from \"@arcgis/core/WebMap\";\nimport Collection from \"@arcgis/core/core/Collection\";\nimport ActionToggle from \"@arcgis/core/support/actions/ActionToggle\";\nimport LayerList from \"@arcgis/core/widgets/LayerList\";\nimport { lazy, Suspense } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport FeatureLayer from \"@arcgis/core/layers/FeatureLayer\";\nimport DevPlanFilter from \"../DevPlanFilter\";\nconst OpacitySlider = lazy(() => import(\"../OpacitySlider\"));\n\nexport function initializeLayers(\n  ref: HTMLDivElement,\n  view: MapView\n): Promise<LayerList> {\n  return new Promise((resolve, reject) => {\n    addLayersFromWebmap(view).then(() => {\n      const layers = new LayerList({\n        view: view,\n        container: ref,\n        listItemCreatedFunction: layerListItemCreated,\n      });\n      layers.on(\n        \"trigger-action\",\n        (event: __esri.LayerListTriggerActionEvent) => {\n          if (event.item.layer.title === \"Property\") {\n            togglePropertyLabels(event);\n          }\n        }\n      );\n      resolve(layers);\n    });\n  });\n}\n\nfunction addLayersFromWebmap(view: MapView) {\n  return new Promise((resolve, reject) => {\n    const map = new WebMap({\n      portalItem: {\n        id: \"95092428774c4b1fb6a3b6f5fed9fbc4\",\n      },\n    });\n\n    map.loadAll().then(() => {\n      const groups = view.map.allLayers\n        .filter((layer) => {\n          return layer.type === \"group\";\n        })\n        .toArray();\n      groups.forEach((group) => {\n        const match = map.allLayers.find((layer) => {\n          return layer.type === \"group\" && layer.title === group.title;\n        }) as __esri.GroupLayer;\n\n        // match.layers.forEach((layer,i) => {\n        //   if ((group as __esri.GroupLayer).findLayerById(layer.id) ===\n        //   undefined) {\n        //     (group as __esri.GroupLayer).add(layer, i);\n        //   }\n        // });\n        console.log(match.title, match.layers.length);\n        const matchlayers = match.layers.slice();\n        const layers = match.layers.filter((layer) => {\n          const found = (group as __esri.GroupLayer).findLayerById(layer.id);\n          //attempting to update stored layer if updated in webmap (popup and renderer)\n          if (found !== undefined) {\n            if (found.type === 'feature') {\n              (found as __esri.FeatureLayer).popupTemplate = (layer as __esri.FeatureLayer).popupTemplate;\n              (found as __esri.FeatureLayer).renderer = (layer as __esri.FeatureLayer).renderer;\n            }\n          }\n\n          return (\n            (group as __esri.GroupLayer).findLayerById(layer.id) ===\n            undefined\n          );\n        });\n        (group as __esri.GroupLayer).addMany(\n\n            layers.toArray()\n        );\n\n        (group as __esri.GroupLayer).layers.forEach(layer1 => {\n          let index = matchlayers.findIndex(layer2 => {\n            return layer1.id === layer2.id;\n          });\n          console.log(layer1.title, index);\n          (group as __esri.GroupLayer).reorder(layer1, index);\n        });\n        matchlayers.destroy();\n      });\n      resolve(true);\n    });\n  });\n}\nconst setPropertyColor = (layer: FeatureLayer, light: boolean) => {\n  const renderer = (layer.renderer as __esri.SimpleRenderer).clone();\n  if (light) {\n    (renderer.symbol as __esri.SimpleFillSymbol).outline.color.r = 0;\n    (renderer.symbol as __esri.SimpleFillSymbol).outline.color.g = 0;\n    (renderer.symbol as __esri.SimpleFillSymbol).outline.color.b = 0;\n  } else {\n    (renderer.symbol as __esri.SimpleFillSymbol).outline.color.r = 255;\n    (renderer.symbol as __esri.SimpleFillSymbol).outline.color.g = 255;\n    (renderer.symbol as __esri.SimpleFillSymbol).outline.color.b = 255;\n  }\n  layer.renderer = renderer;\n};\nconst togglePropertyColor = (layer: FeatureLayer, sections: any) => {\n  if (sections.length > 1) {\n    setPropertyColor(layer, !sections.getItemAt(1).getItemAt(0).value);\n  }\n};\nexport const togglePropertyLabels = (\n  event: __esri.LayerListTriggerActionEvent\n) => {\n  if (event.item.layer.title === \"Property\") {\n    togglePropertyColor(\n      event.item.layer as FeatureLayer,\n      event.item.actionsSections\n    );\n    if (!(event.item.layer as __esri.FeatureLayer).labelsVisible) {\n      (event.item.layer as __esri.FeatureLayer).labelsVisible = true;\n    }\n    const selected = event.item.actionsSections\n      .getItemAt(0)\n      .filter((section) => {\n        return (section as ActionToggle).value;\n      });\n\n    const selectedTitles = selected.map((section) => {\n      return (section as ActionToggle).title;\n    });\n\n    const selectedExpressions = propertyLabelExpressions.filter(\n      (expression) => {\n        return selectedTitles.includes(expression.title);\n      }\n    );\n    const expressions = selectedExpressions.map((expression) => {\n      return expression.expression;\n    });\n    const expression = expressions.join(\"+ TextFormatting.NewLine+\");\n    (event.item.layer as __esri.FeatureLayer).labelingInfo = [];\n\n    //if ((event.action as ActionToggle).value) {\n    (event.item.layer as __esri.FeatureLayer).labelingInfo = [\n      {\n        // autocasts as new LabelClass()\n        symbol: {\n          type: \"text\", // autocasts as new TextSymbol()\n          color: \"black\",\n          haloColor: \"white\",\n          haloSize: 1,\n          font: {\n            family: \"AvenirNext LT Pro Regular\",\n            style: \"normal\",\n            weight: \"bold\",\n          },\n        },\n        labelExpressionInfo: {\n          expression: expression,\n        },\n        maxScale: 0,\n        minScale: 5000,\n      } as any,\n    ];\n    // }\n    // } else {\n    //   (event.item.layer as __esri.FeatureLayer).labelingInfo = (\n    //     event.item.layer as __esri.FeatureLayer\n    //   ).labelingInfo.filter((info) => {\n    //     return info.labelExpressionInfo.expression != expression.expression;\n    //   });\n    // }\n  }\n};\nconst propertyLabelExpressions: any[] = [\n  {\n    expression: `First(Split($feature['SITE_ADDRESS'], ' '))`,\n    title: \"Address\",\n  },\n  {\n    expression: `$feature['PIN_NUM']`,\n    title: \"PIN\",\n  },\n  {\n    expression: `$feature['REID']`,\n    title: \"REID\",\n  },\n  {\n    expression: `When(IsEmpty($feature[\"SALE_DATE\"]),null, Concatenate(Month($feature[\"SALE_DATE\"])+1, '/',Day($feature[\"SALE_DATE\"]), '/',Year($feature[\"SALE_DATE\"])))`,\n    title: \"Sale Date\",\n  },\n  {\n    expression: `Text($feature.TOTSALPRICE,'$#,###')`,\n    title: \"Sale Price\",\n  },\n];\n\nconst addPropertyLabelToggles = (item: any) => {\n  if (\n    item.layer.title === \"Property\" &&\n    item.layer.type !== \"group\" &&\n    item.actionsSections.length === 0\n  ) {\n    let toggles: Collection = new Collection();\n    toggles.addMany(\n      propertyLabelExpressions.map((expression) => {\n        return new ActionToggle({\n          value: item.layer.labelingInfo?.find((info: any) => {\n            return (\n              info.labelExpressionInfo?.expression.includes(\n                expression.expression\n              ) && item.layer.labelsVisible\n            );\n          }),\n          title: expression.title,\n          visible: true,\n        });\n      })\n    );\n    (item as __esri.ListItem).actionsSections.push(toggles);\n\n    toggles = new Collection();\n    toggles.add(\n      new ActionToggle({\n        value: item.layer.renderer.symbol.outline.color.isBright,\n        title: \"Light Outline\",\n        visible: true,\n      }) as any\n    );\n    (item as __esri.ListItem).actionsSections.push(toggles);\n\n    (item as __esri.ListItem).actionsOpen = true;\n    setTimeout(() => {\n      const title = document.createElement(\"h4\");\n      title.id = \"labels-actions-title\";\n      title.textContent = \"Labels\";\n      title.setAttribute(\"style\", \"padding: 0.5em;margin: 0;\");\n      const actions = document.querySelector(\".esri-layer-list__item-actions\");\n      if (\n        actions?.parentElement &&\n        !document.getElementById(\"labels-actions-title\")\n      ) {\n        actions.prepend(title);\n      }\n    }, 500);\n  }\n};\n\nconst addDevPlanFilters = (item: any) => {\n  if (\n    item.layer.title.includes('Development Plans') &&\n    item.layer.type !== \"group\" &&\n    item.actionsSections.length === 0\n  ) {\n    const filter = document.createElement(\"filter-container\");\n    const root = createRoot(filter as HTMLDivElement);\n    root.render(\n      <Suspense fallback={\"\"}>\n        <DevPlanFilter datefield={'apply_date'} layer={item.layer} />\n      </Suspense>\n    );\n    ((item as __esri.ListItem).panel.content as any[]).push(filter);\n  }\n}\n\nconst createPanel = (item: __esri.ListItem) => {\n  if (\n    item.visible &&\n    !item.panel &&\n    item.layer.type !== \"group\" &&\n    item.layer.type !== undefined\n  ) {\n    const slider = document.createElement(\"slider-container\");\n    const root = createRoot(slider as HTMLDivElement);\n    root.render(\n      <Suspense fallback={\"\"}>\n        <OpacitySlider value={item.layer.opacity} layer={item.layer} />\n      </Suspense>\n    );\n\n    item.panel = {\n      content: [slider, \"legend\"],\n      open: false,\n    } as __esri.ListItemPanel;\n    addDevPlanFilters(item);\n\n  }\n};\n\nconst layerListItemCreated = (event: any): void => {\n  const item = event.item;\n  createPanel(item);\n  item.open = item.layer.visible;\n  item.layer.watch(\"visible\", (visible: boolean) => {\n    // if (item.panel) {\n    //   item.panel.open = visible;\n    // }\n    item.open = visible;\n    createPanel(item);\n\n    if (visible) {\n      if (item.layer.parent) {\n        if (item.layer.parent.type === \"group\") {\n          item.layer.parent.visible = true;\n        }\n      }\n      if (item.layer.parent.parent) {\n        if (item.layer.parent.parent.type === \"group\") {\n          item.layer.parent.parent.visible = true;\n        }\n      }\n    }\n  });\n  addPropertyLabelToggles(item);\n};\n\nexport const filterLayers = (\n  value: string,\n  layerList: __esri.LayerList\n): void => {\n  if (!value) {\n    value = \"\";\n  }\n  layerList.operationalItems.forEach((item: __esri.ListItem) => {\n    if (item.layer.type === \"group\") {\n      let open = false;\n      (item.layer as __esri.GroupLayer).layers.forEach((layer) => {\n        if (layer.title.toLowerCase().includes(value.toLowerCase())) {\n          layer.listMode = \"show\";\n          open = true;\n        } else {\n          layer.listMode = \"hide\";\n        }\n        //handle second level group layers\n        if (layer.type === \"group\") {\n          (layer as __esri.GroupLayer).layers.forEach((sublayer) => {\n            if (sublayer.title.toLowerCase().includes(value.toLowerCase())) {\n              layer.listMode = \"show\";\n              sublayer.listMode = \"show\";\n              open = true;\n            } else {\n              sublayer.listMode = \"hide\";\n            }\n          });\n        }\n      });\n      item.open = value.length > 0 && open;\n      if (!value.length || open) {\n        document\n          .getElementById(\n            `${(layerList as any).id}_${(item as any).uid}__title`\n          )\n          ?.parentElement?.parentElement?.parentElement?.removeAttribute(\n            \"hidden\"\n          );\n      }\n      if (!open) {\n        document\n          .getElementById(\n            `${(layerList as any).id}_${(item as any).uid}__title`\n          )\n          ?.parentElement?.parentElement?.parentElement?.setAttribute(\n            \"hidden\",\n            \"\"\n          );\n      }\n    }\n  });\n};\n\nexport const resetLayers = (list: __esri.LayerList) => {\n  const groups: Collection<__esri.GroupLayer> = list?.view.map.allLayers.filter(layer => {\n    return layer.type === 'group';\n  }) as Collection<__esri.GroupLayer>;\n  groups.forEach((group) => {\n    group.visible = group.title === 'Property';\n    group.layers.forEach(layer => {\n      layer.visible = layer.title === \"Property\";\n    })\n  });  \n};\n","export const tips = {title: 'Layer List Tips', tips: [\n    {\n      title: 'Group Layers',\n      text: 'Layers in the layer list are now grouped based on category, making it easier to find layers.',\n    }\n]}","import { useCallback, useEffect, useRef, useState } from \"react\";\nimport { initializeLayers } from \"./layers\";\nimport { tips } from \"./tips\";\n\nconst useLayers = (args: any) => {\n\n    const ref = useRef() as any;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const loaded = useRef(false);\n    const [layerList, setLayerList] = useState<__esri.LayerList>();\n    const [isLoading, setIsLoading] = useState(true);\n    const [isActive, setIsActive] = useState(false);\n  \n    useEffect(() => {\n      if (!loaded.current) {\n        loaded.current = true;\n        initializeLayers(ref.current, args.view).then(\n          (layerList: __esri.LayerList) => {\n            setLayerList(layerList);\n            layerList.when(() => {\n              setIsLoading(false);\n            });\n          }\n        );\n      }\n      return () => {\n        layerList && layerList?.destroy();\n      };\n    }, []); // only after first render\n  \n    useEffect(() => {\n      setIsActive(args.isActive);\n    }, [args.isActive]);\n    const panelDismissed = useCallback((e: any) => {\n        args.panelDismissed();\n        }, []);\n    const tipsClicked = useCallback((e: any) => {\n        args.showTips(tips);\n        }, []);    \n    return {\n        ref,\n        layerList,\n        isLoading,\n        isActive,\n        panelDismissed,\n        tipsClicked        \n        }        \n}\nexport default useLayers;","import {\n  CalciteAction,\n  CalciteInput,\n  CalciteScrim,\n  CalcitePanel,\n  CalciteTooltip,\n} from \"@esri/calcite-components-react\";\nimport React from \"react\";\nimport { filterLayers, resetLayers } from \"./utils/layers\";\nimport \"./Layers.css\";\nimport useLayers from \"./utils/useLayers\";\nexport const Layers = (args: any) => {\n  \n  const { \n    ref,\n    layerList,\n    isLoading,\n    isActive,\n    panelDismissed,\n    tipsClicked      \n  } = useLayers(args);\n\n  return (\n    <CalcitePanel\n      id=\"layers-panel\"\n      heading=\"Layers\"\n      hidden={!isActive}\n      closed={!isActive ? true : undefined}\n      dismissed={!isActive ? true : undefined}\n      dismissible\n      onCalcitePanelDismiss={panelDismissed}\n    >\n      <CalciteAction id=\"tip\" icon=\"lightbulb\"  text=\"Tips\" slot=\"header-actions-end\" onClick={tipsClicked}></CalciteAction>\n      <CalciteTooltip label=\"Show Tip\" referenceElement=\"tip\">Show Tip</CalciteTooltip>\n      <div className=\"layers\">\n        {layerList && (\n          <div className=\"row sticky\">\n            <CalciteInput\n              clearable\n              placeholder=\"Filter by layer name\"\n              scale=\"m\"\n              onCalciteInputInput={(e) => {\n                if (layerList) {\n                  filterLayers(e.target.value, layerList);\n                }\n              }}\n            ></CalciteInput>\n            <CalciteAction\n              text=\"clear\"\n              icon=\"viewHide\"\n              scale=\"s\"\n              onClick={() => resetLayers(layerList)}\n            ></CalciteAction>\n          </div>\n        )}\n        <div ref={ref}></div>\n        <CalciteScrim\n          loading\n          hidden={isLoading ? undefined : true}\n        ></CalciteScrim>\n      </div>\n    </CalcitePanel>\n  );\n};\nexport default Layers;\n"],"names":["args","loaded","useRef","maxYear","setMaxYear","useState","minYear","setMinYear","useEffect","layer","datefield","current","async","queryFeatures","where","returnGeometry","outStatistics","statisticType","onStatisticField","outStatisticFieldName","outFields","then","stats","features","length","max","Date","getAttribute","getFullYear","min","definitionExpression","refresh","catch","reason","console","log","getMinMax","labelHandles","labelTicks","maxValue","minValue","minLabel","toString","maxLabel","onCalciteSliderChange","e","target","OpacitySlider","lazy","initializeLayers","ref","view","Promise","resolve","reject","map","WebMap","portalItem","id","loadAll","allLayers","filter","type","toArray","forEach","group","match","find","title","layers","matchlayers","slice","found","findLayerById","undefined","popupTemplate","renderer","addMany","layer1","index","findIndex","layer2","reorder","destroy","addLayersFromWebmap","LayerList","container","listItemCreatedFunction","layerListItemCreated","on","event","item","togglePropertyLabels","sections","actionsSections","light","clone","symbol","outline","color","r","g","b","setPropertyColor","getItemAt","value","labelsVisible","selectedTitles","section","selectedExpressions","propertyLabelExpressions","expression","includes","expressions","join","labelingInfo","haloColor","haloSize","font","family","style","weight","labelExpressionInfo","maxScale","minScale","createPanel","visible","panel","slider","document","createElement","createRoot","render","Suspense","fallback","opacity","content","open","push","addDevPlanFilters","watch","parent","toggles","Collection","ActionToggle","info","add","isBright","actionsOpen","setTimeout","textContent","setAttribute","actions","querySelector","parentElement","getElementById","prepend","addPropertyLabelToggles","tips","text","layerList","setLayerList","isLoading","setIsLoading","isActive","setIsActive","when","panelDismissed","useCallback","tipsClicked","showTips","Layers","useLayers","heading","hidden","closed","dismissed","dismissible","onCalcitePanelDismiss","icon","slot","onClick","label","referenceElement","className","clearable","placeholder","scale","onCalciteInputInput","operationalItems","toLowerCase","listMode","sublayer","uid","removeAttribute","filterLayers","list","loading"],"sourceRoot":""}